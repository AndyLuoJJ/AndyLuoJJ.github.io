<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://AndyLuoJJ.github.io</id>
    <title>Andy的小书架</title>
    <updated>2019-09-13T09:44:58.954Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://AndyLuoJJ.github.io"/>
    <link rel="self" href="https://AndyLuoJJ.github.io/atom.xml"/>
    <subtitle>这是我的个人博客，希望能够坚持写一下自己各方面的心得😃</subtitle>
    <logo>https://AndyLuoJJ.github.io/images/avatar.png</logo>
    <icon>https://AndyLuoJJ.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Andy的小书架</rights>
    <entry>
        <title type="html"><![CDATA[Homebrew - macOS 上完美的包管理器]]></title>
        <id>https://AndyLuoJJ.github.io/post/homebrew-macos-shang-wan-mei-de-bao-guan-li-qi</id>
        <link href="https://AndyLuoJJ.github.io/post/homebrew-macos-shang-wan-mei-de-bao-guan-li-qi">
        </link>
        <updated>2019-09-13T09:15:33.000Z</updated>
        <summary type="html"><![CDATA[<p>你需要几个好的「管家」来管理你的电脑 - Homebrew 就是其中一个。</p>
]]></summary>
        <content type="html"><![CDATA[<p>你需要几个好的「管家」来管理你的电脑 - Homebrew 就是其中一个。</p>
<!-- more -->
<h2 id="介绍">介绍</h2>
<p>As you know，macOS 是一个类 Unix 平台，能够方便地配置各种需要的开发环境，前端、后台、移动端的开发都可以在 macOS 上进行。在开发的过程中，常常需要开发者安装各种各样的第三方工具才能够完成相应的开发任务，比如Python、MySQL。然而，不同于 Ubuntu 自带有 apt-get，在 macOS 上一直没有原生的包管理工具，这也为开发者使用第三方库带来了一定的困难。另一方面，有时候采用官方的安装方法，可能会与系统自身的文件系统纠缠在一起，如果未来某天想要彻底删除第三方库的话，可能会异常繁琐，甚至一不小心就删除了系统文件，得不偿失。Homebrew 的诞生解决了这一问题，通过 Homebrew 可以方便地进行包管理，并且不会对系统文件产生影响。本文将对这个神奇的工具进行一些简单的介绍。</p>
<blockquote>
<p>一些趣闻：听说 Homebrew 的作者因为面试的时候没办法手写二叉树被拒了。</p>
</blockquote>
<h3 id="什么是homebrew">什么是Homebrew</h3>
<p>正如官方宣传的那样（官网链接<a href="https://brew.sh">戳这里</a>），Homebrew 是macOS 上缺失已久的包管理工具，它是一个命令行（CLI）程序，提供了类似Ubuntu 上的 apt-get 功能，通过简单的命令，就能够方便地进行第三方库的安装、更新与卸载操作，并且避免了与系统文件产生冲突的弊端。</p>
<h3 id="为什么要使用homebrew">为什么要使用Homebrew</h3>
<p>作为一名开发者，与第三方库打交道是再正常不过的事情了。在 macOS 平台上，使用第三方库的方式主要包括：源码编译、官网提供 pkg 文件、使用包管理工具。使用源码编译能够完全掌握安装流程，还能够按照自己的需求修改源码进行个性化，但是步骤比较繁琐，需要的编译工具较多，并且容易出错。使用官方提供的 pkg 文件简化了安装步骤，比如 Python 就提供了官方 pkg 安装包，直接双击打开像安装应用程序一样即可，但是采用这种方式进行安装非常容易与系统文件混在一起，卸载的时候就是一场噩梦了。虽然通过 pkgutil 可以查看安装 pkg 的时候创建了哪些文件，但是要想做到完全卸载还是需要手动进行清理。而使用包管理工具则进一步简化了安装步骤，只需使用简单的命令就能方便地安装、更新和删除，在易用性和功能性中间取得一个较好的平衡。</p>
<p>除了 Homebrew 以外，还有其他的 macOS 包管理工具，如 MacPorts 等，感兴趣的话可以自行查阅相关资料。</p>
<h2 id="安装与卸载">安装与卸载</h2>
<p>下面介绍 Homebrew 本身的安装、更新与卸载方法。注意：以下所有代码均在 Terminal 中执行。</p>
<h3 id="安装">安装</h3>
<p>Homebrew 是一个使用 Ruby 编写的程序，而 macOS 自带 Ruby，因此可以使用自带的 Ruby 进行安装。执行下列代码：</p>
<pre><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
</code></pre>
<p>如有需要，可以先升级一下系统的 Ruby 版本再安装 Homebrew。</p>
<p>在 macOS 上使用命令行程序需要先安装 Xcode Command Line Tools，可以通过<code>xcode-select install</code>进行安装，按照提示一步一步执行即可。</p>
<p>Homebrew 安装完成后，可以执行<code>brew --help</code>查看 Homebrew 的帮助文档，同时验证是否安装成功。</p>
<h3 id="更新">更新</h3>
<p>执行下列代码以更新 Homebrew：</p>
<pre><code>brew update
</code></pre>
<p>Homebrew 源在国外，更新和下载的时候可能比较慢，稍微等一下就好，也可以采取魔法上网加快下载速度。</p>
<h3 id="卸载">卸载</h3>
<p>执行下列代码以卸载 Homebrew：</p>
<pre><code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&quot;
</code></pre>
<p>Homebrew 的安装目录在<code>/usr/local/Cellar</code>，可以看看有没有什么残留文件。</p>
<h2 id="使用homebrew">使用Homebrew</h2>
<p>下面简单介绍一下如何使用 Homebrew。</p>
<h3 id="库的查找-安装-更新-删除">库的查找、安装、更新、删除</h3>
<p>要查找自己准备安装的库是否支持 Homebrew，可以用 Homebrew 查一下，执行</p>
<pre><code>brew search &lt;formulae&gt;
</code></pre>
<p>执行下列代码以查看库的信息：</p>
<pre><code>brew info &lt;formulae&gt;
</code></pre>
<p>执行下列代码以安装新的库：</p>
<pre><code>brew install &lt;formulae&gt;
</code></pre>
<p>执行下列代码以查看哪些库有新的版本</p>
<pre><code>brew outdated
</code></pre>
<p>执行下列代码对给定的库进行更新，更新后原来的库文件夹会自动删除。</p>
<pre><code>brew upgrade &lt;formulae&gt;
</code></pre>
<p>也可以一次性更新全部</p>
<pre><code>brew upgrade
</code></pre>
<p>执行下列代码删除已安装的第三方库</p>
<pre><code>brew unistall &lt;formulae&gt;
</code></pre>
<p>执行下列代码列出已经成功安装的库</p>
<pre><code>brew list
</code></pre>
<h3 id="添加第三方仓库">添加第三方仓库</h3>
<p>能够直接使用 Homebrew 安装的第三方库都保存在 Homebrew 自己的 Github core 中，Homebrew 还支持从其他仓库进行安装，vapor 就是一个典型的例子。<br>
执行下列代码查看已添加的仓库</p>
<pre><code>brew tap
</code></pre>
<p>执行下列代码添加新的 Github 路径，通常可以通过第三方库的帮助文档获得</p>
<pre><code>brew tap &lt;user/repo&gt;
</code></pre>
<p>如果第三方库不是保存在 Github 上的话，需要给出完整路径</p>
<pre><code>brew tap &lt;user/repo&gt; &lt;URL&gt;
</code></pre>
<p>执行下列代码对 tap 的库进行固定</p>
<pre><code>brew tap-pin &lt;user/repo&gt;
</code></pre>
<p>在 Homebrew 安装第三方库的时候，如存在重名的库，会按照一下的顺序进行安装：</p>
<ol>
<li>pinned taps</li>
<li>core formulae</li>
<li>other taps<br>
如果想要在安装的时候指定使用哪个 tap，可以执行下列代码</li>
</ol>
<pre><code>brew install username/repo/formulae
</code></pre>
<p>如果直接使用<code>brew install</code>，将会按照上述顺序搜索并安装。</p>
<p>执行下列代码移除路径</p>
<pre><code>brew untap &lt;user/repo&gt;
</code></pre>
<blockquote>
<p>关于添加第三方仓库的详细内容请查阅<a href="https://docs.brew.sh/Taps#taps-third-party-repositories">官方文档</a>。</p>
</blockquote>
<h3 id="troubleshooting">TroubleShooting</h3>
<p>执行下列代码清理一下 Homebrew 中的无用文件，</p>
<pre><code>brew cleanup
</code></pre>
<p>执行下列代码对 Homebrew 进行诊断，如果出现 warning，通常来说只要 Homebrew 能正常使用就不用管。</p>
<pre><code>brew doctor
</code></pre>
<h2 id="使用homebrew-cask">使用Homebrew Cask</h2>
<p>Homebrew 能够实现第三方库的便捷安装，那么有没有什么东西能够实现第三方应用程序的便捷安装呢？受 Homebrew 的启发，Homebrew 的作者开发了Homebrew Cask，旨在使用类似于 Homebrew 的方式对第三方应用程序进行管理。</p>
<blockquote>
<p>这里的第三方应用程序指的是没有在 Mac App Store 上架的应用程序。</p>
</blockquote>
<h3 id="什么是homebrew-cask">什么是Homebrew Cask</h3>
<p>Homebrew Cask 可以说是 Homebrew 的一个衍生程序，是为了解决 macOS 上非 Mac App Store 的应用程序的管理问题。在 macOS 上，常见的应用程序安装方式包括：Mac App Store、dmg 文件、pkg 文件。由于桌面端的环境不比移动端，在 macOS 上还无法像 iOS 一样强制用户在 App Store 中安装应用程序，因此可以使用多种方法在 macOS 上安装应用程序。</p>
<ol>
<li>Mac App Store 是苹果官方的安装渠道，在 Mac App Store 上架的软件严格遵循沙盒限制，每个应用程序有自己独立的文件系统，未得到用户允许无法访问其他目录，安全性有很好的保障，但也由于沙盒的原因，在 Mac App Store 上架的应用程序有不少都是阉割版程序，缺失部分核心功能，如 QQ、QQ 音乐、Alfred 等。</li>
</ol>
<p><img src="https://cn.bing.com/th?id=OIP.aOIJ9xxpnDpIsJmHZ-_YrQHaHa&amp;pid=Api&amp;rs=1" alt="MAS"></p>
<ol start="2">
<li>pkg 是早期 Mac 上非常常用的安装方式，在前面也提到过 Python 提供了官方 pkg 安装包，同样它也可以用来安装应用程序。使用 pkg 进行安装只需要双击 pkg 文件，然后按照提示一步一步进行即可，与在 Windows 上安装软件非常相似，使用起来比较方便。但是 pkg 安装存在的问题是应用程序产生的文件可能会与系统文件混在一起，卸载的时候如果不借助第三方清理工具会非常麻烦。常见的使用 pkg 安装的软件有 Adobe 全家、Microsoft Office、Teamviewer 等。有「洁癖」的用户可以使用自带的 pkgutil 或第三方的 UninstallPKG 对 pkg 安装的应用程序进行清理。</li>
</ol>
<p><img src="https://images2015.cnblogs.com/blog/996103/201607/996103-20160721150540919-1448409147.png" alt="PKG"></p>
<ol start="3">
<li>dmg 是目前比较主流的安装方式，应用程序发布者将编译打包好的 .app 文件放在 dmg 文件中，用户安装时直接将 app 拖放到 /Application 目录即可，安装过程简单到令人发指。</li>
</ol>
<p><img src="https://cn.bing.com/th?id=OIP.FcEQ7YbtWC5f7LAV269smQHaD-&amp;pid=Api&amp;rs=1" alt="DMG"></p>
<p>Homebrew Cask 在 dmg 安装的基础上简化了操作，直接通过命令行方便地管理已安装的应用，并且在一定程度上解决了卸载不完全的问题。</p>
<h3 id="软件的查找-安装-更新-删除">软件的查找、安装、更新、删除</h3>
<p>在已经安装好 Homebrew 的前提下，先安装 Homebrew Cask，实际上就是把Homebrew Cask 添加到tap的列表中</p>
<pre><code>brew tap caskroom/cask
</code></pre>
<p>执行下列代码查找能够使用 Homebrew Cask 安装的应用程序</p>
<pre><code>brew cask search &lt;formulae&gt;
</code></pre>
<p>执行下列代码查看应用程序的信息</p>
<pre><code>brew cask info &lt;formulae&gt;
</code></pre>
<p>执行下列代码安装应用程序</p>
<pre><code>brew cask install &lt;formulae&gt;
</code></pre>
<p>安装完成后，应用程序会自动被移动到 /Application 目录，等同于从 dmg 中拖出来放到里面。<br>
执行下列代码删除应用程序</p>
<pre><code>brew cask uninstall &lt;formulae&gt;
</code></pre>
<p>对于应用程序的更新，Homebrew 官方建议采用应用程序自己的更新方法对应用进行更新，如果仍想通过 Homebrew Cask 处理，可以先卸载再重新安装即可。<br>
执行下列代码列出已安装的应用程序</p>
<pre><code>brew cask list
</code></pre>
<p>⚠️需要注意的是，使用 Homebrew Cask 仅仅是替代了「从 dmg 文件中把应用拖到 /Application 」这一步骤，如果安装的应用程序是商业软件，仍然需要输入软件授权码才能继续使用。</p>
<blockquote>
<p>Homebrew Cask 安装的一定是正版软件噢。</p>
</blockquote>
<h2 id="总结">总结</h2>
<p>作为一款优秀的程序，Homebrew 使用起来非常简单，其使用教程都可以在<a href="https://docs.brew.sh">官方文档</a>中查到。Homebrew 的诞生极大提高了开发者们的效率，让他们不再为第三方库的繁琐安装步骤而烦恼。</p>
<p>本文只是简单介绍了Homebrew最简单的应用，更加进阶的使用方法可以自行搜索或查阅官方文档。</p>
<p>另外，除了开发者以外，普通用户有时候也能从中获益。例如，macOS 上的 PSP 模拟器程序 PPSSPP 需要两个库的支持，分别是 sdl2 和 libzip，在官方安装教程中就建议用户使用 Homebrew 安装这两个库，才能够正常运行 PPSSPP。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[绪论 - 如何充分利用 iCloud 和自带 App 实现 Apple 设备之间的互通]]></title>
        <id>https://AndyLuoJJ.github.io/post/xu-lun-ru-he-chong-fen-li-yong-icloud-he-zi-dai-app-shi-xian-apple-she-bei-zhi-jian-de-hu-tong</id>
        <link href="https://AndyLuoJJ.github.io/post/xu-lun-ru-he-chong-fen-li-yong-icloud-he-zi-dai-app-shi-xian-apple-she-bei-zhi-jian-de-hu-tong">
        </link>
        <updated>2019-09-11T08:18:05.000Z</updated>
        <summary type="html"><![CDATA[<p>第一个专题定位为「如何充分利用 iCloud 和自带 App 实现 Apple 设备之间的互通」。本篇是该系列主题的第一篇文章。</p>
]]></summary>
        <content type="html"><![CDATA[<p>第一个专题定位为「如何充分利用 iCloud 和自带 App 实现 Apple 设备之间的互通」。本篇是该系列主题的第一篇文章。</p>
<!-- more -->
<blockquote>
<h3 id="目录">目录</h3>
<ul>
<li>总起</li>
<li>写作动机</li>
<li>拟介绍的内容</li>
<li>结束语</li>
</ul>
</blockquote>
<hr>
<h4 id="总起">总起</h4>
<p>随着苹果公司不断开发出新的硬件设备、推行<s>利于圈钱并</s>迎合中国消费者的营销策略，如今在高校学生的群体里，Apple 设备的占有率可谓是节节攀升，在校园里随处可见 iPhone、iPad、MacBook 的身影。特别是近年来苹果为了抢占教育市场，投入了大量的努力，其中的重头戏自然是 new iPad 对 Apple Pencil 的支持、以及面向开发者开放 <code>ClassKit</code> 框架，以期通过硬件和软件的配合，打造一个专属于 Apple 的教育平台。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/12329372-309b46e843eab9e7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Apple 的「人人能创造」课程"></p>
<p>另外，在 WWDC19 闪亮登场的 iPadOS 同样值得期待，得益于 iOS 的基础，iPadOS 想必能够为用户带来更进一步的生产力，令用户能够在 iPad 上实现轻量办公。对于学生党来说，全新登场的 iPadOS 能够充分发挥他们手上的设备的作用，帮助他们在学习、生活中游刃有余地应对各种不同的使用场景。</p>
<p>然而，抛开 Apple 针对教育市场的一系列措施不说，如今在日常使用中，能够做到充分利用 Apple 生态的人似乎不多——这可能是由于拥有复数台 Apple 设备的人不多，大多数人都仅使用一台 Apple 设备，如 iPhone 或 iPad，而并没有考虑过完全投入到 Apple 的生态环境中。可能对于不少人来说，iPhone、iPad 和 Mac 更多扮演的是轻度办公和休闲娱乐的角色，并不能承担需要高生产力的任务。（想想你买 iPad 真的是为了看课件吗😊）</p>
<p>实际上，iOS 和 macOS 两个平台都自带了许多实用的 App，如果充分利用起来，能够很好地提高我们工作生活的效率，配合 iCloud 能够胜任日常生活中的许多任务。同时，对系统自带 App 的充分利用也能避免安装过多的第三方应用，一方面，为手机存储空间较小的用户带来福音，减缓了空间不足的紧迫感；另一方面，在<strong>信任 Apple 和云上贵州</strong>的前提下，能够在一定程度上更好地保护用户的隐私，避免在无意中向自己不信任的第三方泄漏隐私数据和信息。</p>
<h4 id="写作动机">写作动机</h4>
<p>在笔者所处的校园环境中，手持 iPhone 人很多，拥有 iPad 的人也不少，但是 Mac 的普及率就呈指数下降了，更别提拥有复数 Apple 设备的究竟有多少人了。在拥有一台 Apple 设备的同学们中，有不少都是把 iPhone 看作是一台比较好用的智能手机、iPad 是不错的追剧神器，而并没有把自己的设备看作是提高工作生活效率的工具。对于拥有多台 Apple 设备的同学们来说，能够协调使用自己设备的人似乎也不多，大多数都是将设备的工作范围划出明确的界限，互不干扰的同时自然也失去了相互合作的可能。</p>
<p>至于 iCloud，作为 Apple 开发的一款优秀的云盘，它的功能和独特之处得到了许多人的认可，可惜的是，似乎有不少人只是将 iCloud 作为照片存储和系统备份的「备份盘」，而没有看到 iCloud 最本质的功能——「同步盘」。作为「同步盘」，iCloud 最核心的功能是使不同的 Apple 设备之间能够共享数据，正是由于「同步盘」的特点，才使得「移动办公」成为可能。</p>
<p>在笔者看来，工具是为人服务的，只有合理地使用自己的设备和资源，才能使它们的功能最大化，最大程度地服务于我们的学习和日常生活。因此，笔者希望能够分享一下自己在学习、工作和日常生活中充分利用 iCloud、自带 App 和相关优秀第三方应用的经验，让其他人也能够感受到通过 Apple 设备之间的协作来提升效率、提升幸福感的魅力所在。</p>
<p>笔者自己原本是 MacBook + Android 的配置，自从换了 iPhone，感觉放着 iCloud 这个神奇的工具不用，有点可惜，于是就开始研究如何充分利用手里设备的互通性来提高自己的工作和学习效率。虽然没办法用准确的数字来量化自己效率的提升程度，但是在这个过程中我确实感受到了 iCloud、系统自带 App 和优秀第三方应用带给我的幸福感。</p>
<p>出于各种原因，笔者只拥有 iPhone 和 MacBook Pro 两款 Apple 设备，因此只针对这两个设备的互通谈一谈自己的看法。</p>
<h4 id="拟介绍的内容">拟介绍的内容</h4>
<p>在这一专题中，笔者将介绍在自己的学习和日常生活中，如何通过系统自带 App 和优质第三方应用，提升 Apple 设备之间的互通性，进而提升工作效率。iOS 和 macOS 之间的互通依赖于iCloud，因此介绍的应用可能需要登录 iCloud 以实现各自的功能，建议在安全的网络环境下使用。如果在蜂窝移动网络下使用 iCloud 进行同步，需要注意数据的使用情况。</p>
<p>当然，介绍的应用中有部分自带 App 并不需要使用 iCloud，但却给我的使用带来了更好的体验，这些我也会一并介绍。</p>
<p>说个题外话，Apple 选择云上贵州作为中国的云端服务提供者的举措虽然带来了不少的争议，但经个人亲身体验，确实为中国用户提供了更快的访问速度，也不失为一个方便大众的举措。</p>
<p>拟介绍的自带应用包括但不限于：</p>
<ul>
<li>iBooks</li>
<li>备忘录、提醒事项、照片、日历</li>
<li>Podcast、iTunes、Apple Music</li>
<li>iWork</li>
<li>Safari</li>
</ul>
<p>拟介绍的第三方应用包括但不限于：</p>
<ul>
<li>MarginNote</li>
<li>印象笔记</li>
<li>Xmind Zen</li>
</ul>
<p>注：专题内只介绍笔者使用过的 App，除此之外还有很多其他优秀的应用程序，但由于笔者没有使用过，所以不敢妄加评论，大家可以亲自下载其他的 App 试用，找到适合自己的应用。</p>
<h4 id="结束语">结束语</h4>
<p>「提高工作效率」是一个老生常谈的话题了，然而很少人能够关注电子设备自身的优势，而是转向第三方服务，这本无可厚非，笔者再次也只是分享一下自己使用电子设备的一些经验而已。Anyway，电子设备和技术的进步只是提升了我们的工作效率和生产力，并不能从根本上解决拖延症的问题🙃。</p>
<blockquote>
<p>注：图片摘自<a href="https://www.apple.com/cn/"> Apple 中国官网 </a></p>
</blockquote>
]]></content>
    </entry>
</feed>