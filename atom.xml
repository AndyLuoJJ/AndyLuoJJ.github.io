<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://AndyLuoJJ.github.io</id>
    <title>Andy的小书架</title>
    <updated>2020-03-14T08:03:34.756Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://AndyLuoJJ.github.io"/>
    <link rel="self" href="https://AndyLuoJJ.github.io/atom.xml"/>
    <subtitle>这是我的个人博客，希望能够坚持写一下自己各方面的心得😃</subtitle>
    <logo>https://AndyLuoJJ.github.io/images/avatar.png</logo>
    <icon>https://AndyLuoJJ.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Andy的小书架</rights>
    <entry>
        <title type="html"><![CDATA[2020年，我「还」在用哪些数码产品？]]></title>
        <id>https://AndyLuoJJ.github.io/post/2020-nian-wo-huan-zai-yong-na-xie-shu-ma-chan-pin/</id>
        <link href="https://AndyLuoJJ.github.io/post/2020-nian-wo-huan-zai-yong-na-xie-shu-ma-chan-pin/">
        </link>
        <updated>2020-03-13T07:58:03.000Z</updated>
        <summary type="html"><![CDATA[<p>老设备也有春天</p>
]]></summary>
        <content type="html"><![CDATA[<p>老设备也有春天</p>
<!-- more -->
<p>作为一名勤（口）俭（袋）持（没）家（钱）的在校学生，我对比数码产品之类的比较贵重的东西都有着一种强烈的爱惜之情，希望能够在充分发挥物品的功能的同时，尽可能地延长物品的使用年限，让它们能够陪伴我更久一些。对于数码产品，我一向是抱着「喜新不厌旧」的心态，有新的设备能够使用自然是非常开心的，但是对于一些比较旧的设备我也不会嫌弃。我相信男生都是喜欢捣鼓数码设备的吧，就像小孩子拿到新玩具一样，我在拿到新设备的时候就会有一种非常开心的感觉。随着科技的发展，数码设备的成本将会越来越低，功能越来越丰富，普通人也能够享受到科技发展带来的便利。</p>
<p>正如标题所描述的那样，我想在这篇文章中分享一下在 2020 年的今天，我「仍然」在使用哪些数码产品呢？</p>
<h2 id="2015-年-early-retina-macbook-pro-133-寸">2015 年 Early Retina MacBook Pro 13.3 寸</h2>
<p>在进入大学之前，爸妈为我添置了我的第一台笔记本电脑——2015年款的13.3寸Retina MacBook Pro，那个时候这台笔记本刚刚上市，售价 8k+，让当时的我着实吃了一惊，没有想到爸妈会给我买一台这么贵的电脑（谢谢爸妈😊）。那时候的我对电脑系统接触得不多，也不知道 MacBook 的系统和其他电脑的系统是不一样的，因此也没有对 Windows 系统有强烈的依赖，很顺利地就过渡到了 Mac 的系统中（当时还是 OS X Yosemite）。爸妈的同事还贴心地帮我用 Boot Camp 安装了双系统 Windows，这为我后面的学校课程学习提供了不小的帮助。</p>
<figure data-type="image" tabindex="1"><img src="https://andy_luo.gitee.io/blog_image_bed/img/v2-76d5c80bf699ad558eea02c1cbec7d23_1440w.jpg" alt="接口最多的最后一代 MacBook Pro" loading="lazy"></figure>
<p>MacBook 给我的第一印象就是轻、薄、好看，摸上去的感觉很舒服。也许是上天的安排吧，这台 Mac 打开了我学习计算机和软件开发知识的大门，走进了 iOS 开发的世界（虽然仍然是个菜鸟）。直到今天，这台笔记本依旧是我不二的主力设备，Xcode、PyCharm、Typora、MarginNote 等一众优秀的软件让这台 MacBook Pro 依然不愧为生产力工具，丰富的接口也免除了新款 MacBook 特有的需要多个转接口的麻烦。唯一一个小遗憾就是，笔记本的内置硬盘只有 128 G，用来存储数据实在是不够用，于是乎，我增加了两块移动硬盘作为数据存储的解决方案，一块是 Seagate 的 1T 移动硬盘，另一块是 Toshiba 的 2T 移动硬盘，加上 5G 的 iCloud 免费空间和 5G 的 OneDrive 免费空间，数据存储和同步的问题基本得到解决。</p>
<p>众所周知，2015 年的 MacBook Pro 的视网膜屏存在涂层脱落的问题，在我得知这个消息的时候电脑已经使用了三年了，于是抱着试一试的心态，预约前往广州天环广场的 Apple Store 咨询了一下这个问题。Genius Bar 的小哥很爽快地就直接给我换了，大概只花了半天的时间就换好了屏幕，看上去就跟换了一台新的电脑一样。虽然现在好像又出现了涂层脱落的问题，但是影响不算特别大，将就着用了。换完屏幕后，我又为我的爱机贴上了贴纸，贴完之后简直就是一台新机器了有！没！有！</p>
<figure data-type="image" tabindex="2"><img src="https://andy_luo.gitee.io/blog_image_bed/img/v2-ea2ddaf6d6410b7e2f442b86de587a4e_1440w.jpg" alt="A 面和 D 面的贴纸" loading="lazy"></figure>
<p>当然啦，毕竟是四年前的机器了，这台电脑也存在一定的问小毛病包括电池状况不佳、键盘磨损等，打算在疫情结束之后去 Apple Store 看看能不能解决，让这台笔记本继续发光发热吧！</p>
<figure data-type="image" tabindex="3"><img src="https://andy_luo.gitee.io/blog_image_bed/img/v2-1c460135d9d332871a0e77783f106b6c_1440w.jpg" alt="高频率使用 command 键和空格键导致的磨损" loading="lazy"></figure>
<h2 id="iphone-6s">iPhone 6s</h2>
<p>2016年的时候，打着学习 iOS 开发的名义、同时也为了能够更加完整地体验 Apple 的产品，我入手了一代神机 iPhone 6s，当时恰逢 iPhone 7 上市、6s 价格下调，为了避免手机出现空间不足的尴尬，我直接就入手了一台 128G 的 iPhone 6s，导致的结果就是我的手机容量和电脑是一样的哈哈。平心而论，iPhone 6s 确实是一台十分优秀的机器，A9 处理器在 2020 年的今天依旧坚挺，处理各种任务都游刃有余，据说还有望撑到 iOS 14 升级...? 128G 的容量也让这台手机变成了一台游戏机，装一堆游戏、存一堆照片、看一堆视频眼都不眨，从来没有担心过空间不够用的问题。</p>
<p>作为我的第二台 Apple 设备，iPhone 的加入使得 MacBook Pro 和 iPhone 两者之间的生态链更加完整，两台设备之间可以进行更加紧密的协作，包括 iCloud、Handoff、AirDrop 等技术都极大地提高了我的工作学习效率。感兴趣的朋友可以关注一下我的<a href="https://zhuanlan.zhihu.com/c_1212789517444648960">知乎专栏</a>。</p>
<p>和 MacBook 一样，手机用久了也会有不少的毛病。2019 年的时候我在 Apple Store 为手机更换了电池后，明显感觉到手机的流畅度有一定程度的提升，续航时间也得到了保证。希望这台手机也能够陪伴我走完研究生的生涯吧！</p>
<h2 id="apple-watch-series-3">Apple Watch Series 3</h2>
<p>Apple Watch 对我来说是个意外的收获——朋友送的。在对 Apple 的产品有了一定的使用经验后，我对 Apple Watch 也有了一定的期待。这只 Apple Watch Series 3 是GPS 版的，需要配合手机才能有更好的使用体验，但是这对我来说并不是一个问题，毕竟手机是 24 小时都在身边的。我对于 Apple Watch 的使用主要包括：</p>
<ul>
<li>看时间，这是一只手表的基本素养。</li>
<li>记录自己每天的运动消耗和锻炼时间。</li>
<li>当作闹钟和计时器。</li>
<li>转发 iPhone 上的通知，可以不用拿出手机扫一眼是不是重要的事情。</li>
<li>实在腾不出手的情况下可以接电话。</li>
<li>提醒自己每隔一段时间进行一次深呼吸和站立。</li>
<li>找不到手机的时候，可以通过 Apple Watch 使手机发出声音，对于我这种大头虾来说是一个非常实用的功能。</li>
</ul>
<p>在我看来，Apple Watch 更多地扮演的是「辅助手机」的角色，能够方便快捷地执行一些简单的日常操作，而不需要掏出手机。除此之外，Apple Watch 还是一个专属的「健康管家」，提醒我每天保持运动、保持健康的心态，才能够以更好的状态去面对生活中的种种困难。</p>
<figure data-type="image" tabindex="4"><img src="https://andy_luo.gitee.io/blog_image_bed/img/v2-34304844f373233758cd1466087ac904_1440w.jpg" alt="Apple Watch——it tells time" loading="lazy"></figure>
<h2 id="ipad-2019">iPad 2019</h2>
<p>作为一件奖励自己 2019 年表现的礼物，iPad 2019 是真正意义上自己花钱买的第一台 Apple 设备。自从进了 Apple 的坑以后，就愈发想凑齐 Apple 的不同设备，体验到更加完美的苹果生态圈。由于是花自己的钱买的设备，极其有限的预算让我把目光瞄向了最便宜的 iPad —— iPad 2019。</p>
<figure data-type="image" tabindex="5"><img src="https://andy_luo.gitee.io/blog_image_bed/img/v2-692bfdaacad416b148c2f7c2a561d763_1440w.jpg" alt="被不少人诟病的 iPad 2019" loading="lazy"></figure>
<p>在确定购买哪一款 iPad 之前，我也经历过一段非常纠结的时光，在 iPad Air 3 和 iPad 2019 之间举棋不定。不少人觉得 iPad 2019 是一台「智商机」，但是我认为，对于预算确实非常有限的消费者来说，iPad 2019 在实际的使用体验上已经足够好了：足够大的 10.2 寸屏幕、对于学习来说足够能打的 A10 芯片、能够使用 Apple Pencil，种种因素都令我对手上的这台机器心满意足。使用 Apple Pencil 在 iPad 上写字的时候，其实并不会感觉到非全贴合屏带来的影响，虽然反光比较严重，但是调整角度后还是能够克服的。当然我还是觉得如果预算不是决定购买 iPad 的第一要素、或者不介意小屏幕的话，iPad Air 3 和 iPad mini 5 绝对是性价比更高的选择。</p>
<p>为了让 Apple Pencil 更加好用，我为它加上了防滑笔尖和防滑套：</p>
<figure data-type="image" tabindex="6"><img src="https://andy_luo.gitee.io/blog_image_bed/img/v2-6813b18ba99f51079a741dc910b39f1f_1440w.jpg" alt="Apple Pencil 改造" loading="lazy"></figure>
<p>对于 iPad 的使用，我写了几篇文章分享一下自己的经验：</p>
<p><a href="https://andyluojj.github.io/post/zotero-kua-she-bei-wen-xian-guan-li/">Zotero 跨设备文献管理</a></p>
<p><a href="https://andyluojj.github.io/post/iwork-ru-he-chong-fen-li-yong-icloud-he-zi-dai-app-shi-xian-apple-she-bei-zhi-jian-de-hu-tong/">iWork - 如何充分利用 iCloud 和自带 App 实现 Apple 设备之间的互通</a></p>
<p><a href="https://andyluojj.github.io/post/numbers-biao-ge-mei-ge-ren-du-neng-zuo-zi-ji-de-tong-ji-xue-jia/">Numbers 表格——每个人都能做自己的统计学家</a></p>
<p>唯一需要注意的是...看视频真的太舒服了希望不要变成爱奇艺专属设备吧😂</p>
<h2 id="当当阅读器">当当阅读器</h2>
<p>当当阅读器是我用自己的钱买的第一台设备，在拿到学校奖学金之后就用了一部分的钱给父母和自己买了点小礼物。作为一个喜爱阅读的人，我觉得选择合适的阅读媒介对于获得良好的阅读体验是非常重要的。事实证明，购买一个电子阅读器是一个非常划算的选择，对于小说、传记、科普等不需要进行深度阅读的书籍，电子阅读器能够更加真实地还原纸质书的感觉，并且克服了纸质书笨重的缺点，阅读体验也比手机更好。</p>
<p>至于为什么买的是当当阅读器而不是 Kindle，没错还是💰的问题（我太难了）。当当阅读器作为国产阅读器，较低的售价、丰富的功能、非常方便的书籍文件传输功能以及当当书城的支持，使得当当阅读器成为了我心目中的性价比之王。当当书城的书籍数量应该是目前国内唯一能够与亚马逊抗衡的吧，书籍的种类、价格都非常接地气。当然也能够自己在网上搜索书籍资源，再导入到阅读器中进行阅读。值得一提的是，可以尝试一下用电子阅读器看漫画，你会打开新世界的大门的。</p>
<figure data-type="image" tabindex="7"><img src="https://andy_luo.gitee.io/blog_image_bed/img/v2-9ffc50362686e327423907c24bdbc618_1440w.jpg" alt="阅读体验不输 Kindle 的当当阅读器" loading="lazy"></figure>
<p>当当阅读器是在入手 iPad 之前买的，但是我觉得阅读器是能够与 iPad 共存的，不会说买了 iPad 以后阅读器就吃灰了。在 iPad 上我使用 iBooks 阅读一些在阅读器上打不开的 epub 文件，并且 iBooks 在标注和笔记上面还是比阅读器要方便一些的。关于 iBooks 的使用感兴趣的读者可以看一下我的文章：</p>
<p><a href="https://andyluojj.github.io/post/ibooks-ru-he-chong-fen-li-yong-icloud-he-zi-dai-app-shi-xian-apple-she-bei-zhi-jian-de-hu-tong/">iBooks - 如何充分利用 iCloud 和自带 App 实现 Apple 设备之间的互通</a></p>
<p>总的来说，对于原本就喜欢阅读的小伙伴来说，电子阅读器确实是一个非常实用的工具，能够减轻随身携带书籍的负担；但是对于原来就不怎么阅读，或者以为买了阅读器就能够倒逼自己多读书的朋友来说，电子阅读器是最好的压泡面神器。</p>
<h2 id="小米-4">小米 4</h2>
<p>大一时候使用的古董手机，「为发烧而生」的小米在小米 4 上做的确实不错，很容易就热了。年少无知的我也不知道心疼手机，换了两次屏后就换成了 iPhone，没想到四年后找回来依然能用，GBA模拟器、PSP模拟器、微信完美运行，除了有点担心电池会不会爆炸之外几乎完美，当作备用机也是一个不错的选择。</p>
<figure data-type="image" tabindex="8"><img src="https://andy_luo.gitee.io/blog_image_bed/img/v2-105fa0bd5e0b69406fe1026b40ed2453_1440w.jpg" alt="真·钉子户" loading="lazy"></figure>
<h2 id="one-more-thing">One More Thing...</h2>
<p>最后许个愿望吧，希望自己以后能每年添一部新的设备hhh</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Numbers 表格——每个人都能做自己的统计学家]]></title>
        <id>https://AndyLuoJJ.github.io/post/numbers-biao-ge-mei-ge-ren-du-neng-zuo-zi-ji-de-tong-ji-xue-jia/</id>
        <link href="https://AndyLuoJJ.github.io/post/numbers-biao-ge-mei-ge-ren-du-neng-zuo-zi-ji-de-tong-ji-xue-jia/">
        </link>
        <updated>2020-02-17T04:05:31.000Z</updated>
        <summary type="html"><![CDATA[<p>长文、多图预警。<br>
知乎小透明一枚，居然有人翻牌让我深入写写 iWork 软件的使用教程🤣那么我就分三篇文章来写写 Pages、Numbers 和 Keynote 三款 Apple 平台办公软件的基础和进阶使用教程吧！</p>
]]></summary>
        <content type="html"><![CDATA[<p>长文、多图预警。<br>
知乎小透明一枚，居然有人翻牌让我深入写写 iWork 软件的使用教程🤣那么我就分三篇文章来写写 Pages、Numbers 和 Keynote 三款 Apple 平台办公软件的基础和进阶使用教程吧！</p>
<!-- more -->
<h2 id="我为什么把目光投向了-numbers">我为什么把目光投向了 Numbers</h2>
<p>作为一名手持 Apple 全家桶的（伪）果粉，我认为 Apple 自家软件都有着不错的设计，抱着一种「能用自带的就避免下载第三方软件」的心态，我尝试着将 Apple 平台的自带软件充分利用起来。在 iPhone、iPad 和 Mac 上，Apple 已经为消费者提供了许多优秀的应用软件，使消费者在机器到手的时候就已经能够应付日常生活的各种任务了。</p>
<p>回到文档制作这一主题上来，Microsoft Office 凭借着强大的功能，已然成为了业界标准，以至于现在大家已经把「给我一份文稿 / 表格 / 演示文稿」的说法变成了「给我一份 Word / Excel / PPT」了，可见 Office 的巨大影响力。然而，Office 为用户提供了功能非常强大的办公软件，却似乎并没有得到最充分的利用——大多数普通用户对于办公软件的需求并没有那么高，就像某个说法「80% 的用户用着软件 20% 的功能」。这么一来，有时候 Office 的高级功能对于轻度用户来说就比较复杂了，掌握它们也是一个时间成本比较高的事情。</p>
<p>与微软相反，Apple 的 iWorks 办公套件更注重的是普通用户的使用体验，虽然在功能上可能不如 Microsoft Office 那么丰富和全面，但是对于日常使用和简单的进阶使用场景来说，我认为 iWorks 在使用上会比 Office 更加合理和人性化。本篇文章，我就和大家分享一下 iWorks 办公套件中的一员——「Numbers 表格」的一些使用心得。</p>
<blockquote>
<p>关于 Numbers 的官方指南和帮助，可以在应用的菜单栏「帮助」-&gt;「Numbers 表格帮助」处获得。另外，在 <a href="https://appleteacher.apple.com">Apple Teacher</a> 的学习资源网站中，也有关于 Numbers 的官方教程电子书，大家可以自行前往下载。</p>
</blockquote>
<h2 id="numbers-基础使用">Numbers 基础使用</h2>
<p>本节介绍「Numbers 表格」的基础使用方法。</p>
<h3 id="简单操作">简单操作</h3>
<p>打开 Numbers，应用会显示对话框，让用户选择希望用 Numbers 打开哪个文件。点击左下角的「新建文稿」，会显示 Numbers 的模板选取器，里面包含了 Numbers 自带的多种内置模板，包括空白表格、核对清单、个人预算等常用的个人表格，甚至还包括了食谱、成绩簿、相关性项目等不同应用场景下的进阶模板，用户可以根据自己的需要选择合适的模板，就能够快速创建一份适合自己的表格。</p>
<figure data-type="image" tabindex="1"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1581912400645.png" alt="Numbers 内置模板" loading="lazy"></figure>
<p>此外，用户还能够自行设计表格，创建自己的表格模板。在完成模板的设计后，点击菜单栏「文件」-&gt;「存储为模板...」可以选择将当前文件保存为 Numbers 模板文件或者直接添加到模板选取器中，方便下次直接使用。</p>
<figure data-type="image" tabindex="2"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1581912432169.png" alt="自定义 Numbers 模板" loading="lazy"></figure>
<p>Numbers 的主界面比较简洁。最大的一块区域是表格的编辑区域，在此处进行表格文本内容的输入和编辑；上方是标题栏和工具栏，包括了一些快速操作的按钮，在工具栏空白处右键单击可以选择工具栏图表的显示方式和自定义工具栏，可以将自己比较常用的功能添加到工具栏中，提高工作效率；左侧是检查器面板，在选择了表格的内容后才会显示可用选项，主要包括对表格样式、文本样式、单元格样式的修改以及对表格数据的处理等。</p>
<figure data-type="image" tabindex="3"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1581912451979.png" alt="Numbers 主界面" loading="lazy"></figure>
<p>在需要对表格整列或整行进行操作的时候，可以直接选中列号（ABCDEFG...）或行号（1234567...），将鼠标指针放在列号或行号上，会显示出下拉菜单，并显示可以进行的操作；也可以在整列或整行上单击鼠标右键打开该功能。每行和每列的后面有一个「圆形 + 等号」的按钮，点击可以直接添加新的一行或一列。</p>
<p>为了加快有规律性内容的输入，Numbers 提供了自动填充单元格的功能。选中某一个或某几个单元格后，选中区域的上下左右边框中间各有一个黄色的圆点，对圆点进行拖拽能够自动进行单元格的填充，填充的规律由 Numbers 自动确定，如果无法确定填充规律，Numbers 会对选中的内容进行复制。并且，可以自动填充的内容并不局限于数字，还可以是日期、字母等。</p>
<figure data-type="image" tabindex="4"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1581912812238.png" alt="自动填充单元格" loading="lazy"></figure>
<p>在录入了表格的内容后，选中需要修改样式的单元格，在右侧检查器面板中可以对选中的单元格进行修改，修改的内容包括表格边框、表格名称、单元格数据格式、单元格条件填充、文本样式等，具体的调整效果可以自己多试试，一个工作表中可以包含多个表格，同一工作表的多个表格通过其名称进行区分。</p>
<p>在完成了表格的编辑和样式修改后，可以将文件以 .numbers 的格式保存在自己喜欢的路径，也可以另存为其他格式。点击菜单栏「文件」-&gt;「另存为...」，可以看到支持导出的格式包括 PDF、Excel、CSV 以及旧版本的 Numbers 文件格式，其中 PDF、Excel 和 CSV 都能够在 Windows 平台下打开，但是 Excel 和 CSV 都<strong>极有可能</strong>出现格式乱掉的情况。如果仅仅是希望在 Windows 下查看文件的话，建议使用 PDF 格式；如果需要修改但对格式要求不高的话，也可以仅在 Numbers 中编辑内容而不对格式进行任何修改，这样用 Excel 打开后的格式问题可能会稍有缓解。</p>
<blockquote>
<p>除了导出为 Excel 文件以外，Numbers 也能够打开 .xls、.xlsx 的文件，但是同样会存在格式不兼容的问题。</p>
</blockquote>
<h3 id="使用文本框-形状-多媒体-批注">使用文本框、形状、多媒体、批注</h3>
<p>在 Numbers 中，除了普通的表格以外，还能够在表格中添加各种不同的「对象」，以丰富表格的视觉效果，可以插入的「对象」包括独立文本框、形状、多媒体文件等。插入不同「对象」的按钮可以在工具栏中找到，并且插入的图形是矢量图，可以对其进行混合、交叉、减少和排除的矢量计算，从而创建出属于你自己的图形。</p>
<figure data-type="image" tabindex="5"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1581912865039.png" alt="工具栏选择插入内容" loading="lazy"></figure>
<p>需要注意的是，采用「插入对象」的方式为表格添加图片和音频的时候，默认来源为「照片.app」和「音乐.app」中的内容，如果需要插入硬盘上的文件，可以依次点选工具栏的「媒体」-&gt;「选取」按钮，就能够选择硬盘上任意位置的文件添加到当前表格中，当然需要是 Numbers 能够支持的文件格式，具体可用的格式大家可以自行尝试。</p>
<figure data-type="image" tabindex="6"><img src="https://andy_luo.gitee.io/blog_image_bed/img/v2-76756d8522faecff11cbb1b9ac2c6c20_1440w.jpg" alt="选取硬盘上的文件" loading="lazy"></figure>
<p>得益于 Apple 生态的高度整合性，Numbers 支持「从 iPhone 或 iPad 导入」的功能，点击工具栏的「媒体」按钮，可以看到该选项，可以导入的内容包括「拍照」「扫描文稿」「添加速绘」，点击对应的选项后，在 iPhone 或 iPad 上进行操作就能够直接将 iPhone 或 iPad 上得到的内容直接导入到 Numbers 表格中，而无需重新寻找，这一功能对于全家桶用户来说是又一提高效率的利器。</p>
<p>借助内置模板和插入对象的功能，用户能够用 Numbers 制作出样式精美的表格，可以像做 PPT 一样做出一份非常好看的报表了。</p>
<h3 id="icloud-同步">iCloud 同步</h3>
<p>对于 Apple 全家桶用户来说，Numbers 是 iOS 和 macOS 上都有的应用程序，可以通过 iCloud 实现不同设备下的数据同步。Numbers 会在「iCloud 云盘」中会创建一个专属的目录来作为默认的保存位置，不同设备之间的数据会进行实时同步，包括新建表格、删除表格、编辑表格等。如果因为网络中断等问题造成两份表格的内容不一致，Numbers 会提示用户选择一份保留下来的记录，然后重新将所有设备上的内容变成相同的。</p>
<p>要想开启 Numbers 的 iCloud 同步功能，iOS 端在「设置」-&gt;「Apple ID」-&gt;「iCloud」中勾选「iCloud 云盘」和「Numbers 表格」即可，macOS 端在「系统偏好设置」「Apple ID」「iCloud」中勾选「iCloud 云盘」，并在 iCloud 云盘的选项中勾选「Numbers 表格」即可。有关 iWork 和 iCloud 的使用，可以参考我的<a href="https://andyluojj.github.io/post/iwork-ru-he-chong-fen-li-yong-icloud-he-zi-dai-app-shi-xian-apple-she-bei-zhi-jian-de-hu-tong/">其他文章</a>。</p>
<h3 id="共享与多人协作">共享与多人协作</h3>
<p>Numbers 内置共享和多人协作功能。点击菜单栏的「共享」-&gt;「发送副本」可以将当前表格文件的副本以邮件、AirDrop 等方式发送出去。点击菜单栏的「共享」-&gt;「与其他人协作...」或点击工具栏的「协作按钮」可以将邀请其他用户共同参与当前表格的编辑，发送者可以设置文件的访问权限，以防被不具有修改权限的访问者意外修改了文件内容。这一功能在其他的 Apple 自带软件中都有，在文件协作者也是使用 Apple 设备的情况下可以非常方便地进行多人协作。</p>
<figure data-type="image" tabindex="7"><img src="https://andy_luo.gitee.io/blog_image_bed/img/v2-61bd3c4c5a1b38fb0d6350b73946761a_1440w.jpg" alt="多人协作" loading="lazy"></figure>
<h2 id="numbers-进阶使用">Numbers 进阶使用</h2>
<p>本节介绍「Numbers 表格」的一些进阶使用方法。</p>
<h3 id="公式">公式</h3>
<p>有时候我们还需要根据已有的表格数据，按照某条公式进行计算，从而进一步挖掘数据中的信息。Numbers 提供了一定数量的内置公式供用户使用，可以点击工具栏中的「插入」新建公式或选择一些常用的公式。如果在只选中了一个单元格的情况下添加了内置的公式，Numbers 会自动选择它认为正确的单元格来进行计算。</p>
<figure data-type="image" tabindex="8"><img src="https://andy_luo.gitee.io/blog_image_bed/img/v2-a7938a693cf51fdcacd5b3c2bd97a5df_1440w.jpg" alt="插入公式" loading="lazy"></figure>
<p>比较有意思的是，Numbers 还提供了一个插入「股票报价」的功能，点击工具栏的「插入」-&gt;「股票报价」，输入上市公司的名称或代码就可以在当前单元格中插入该公司的股票报价。有了这个功能后，用户甚至能够用 Numbers 打造一个股价监视器😂由于我并不了解股价市场，这个功能没有用过，有需要的朋友可以尝试一下好不好用。</p>
<figure data-type="image" tabindex="9"><img src="https://andy_luo.gitee.io/blog_image_bed/img/v2-3821b4ceafd909b9af637149d7b4919e_1440w.jpg" alt="「股票报价」功能" loading="lazy"></figure>
<p>在内置在空白单元格中输入「=」同样会呼出公式编辑的界面，右侧的检查器栏会显示出 Numbers 自带的函数列表，并且已经进行了一定程度的分类，包括三角函数、工程函数、统计函数、财务函数等。选中某条函数之后，在其下方会显示出该函数的介绍、输入参数、注释、示例等内容，能够帮助用户快速了解一个函数的使用方法。在检查器栏的上方还能够对内置的公式进行搜索。</p>
<figure data-type="image" tabindex="10"><img src="https://andy_luo.gitee.io/blog_image_bed/img/v2-21b8dd7448eb833b9d597a93497ac578_1440w.jpg" alt="公式检查器" loading="lazy"></figure>
<p>在使用公式的时候，公式的输入可以看作是对表格数据的「引用」，而由于一个 Numbers 表格中可以包含多个工作表（参考 Excel 中「工作簿」和「工作表」的概念），根据数据存在位置的不同，可以分为「表内引用」与「表间引用」。「表内引用」是指公式需要一个存在与当前工作表的数据作为输入，而「表间引用」是指公式需要一个存在与另一个工作表中的数据作为输入。</p>
<p>下面通过一个简单的例子来说表内引用和表间引用的使用方法。为方便起见，示例表格文件中仅包含「苹果」和「微软」两个工作表，它们的内容是完全相同的。</p>
<figure data-type="image" tabindex="11"><img src="https://andy_luo.gitee.io/blog_image_bed/img/v2-5e7641c32372cdedd136dc1da68a4321_1440w.jpg" alt="一个🌰" loading="lazy"></figure>
<p>Numbers 采用符号「::」来区分不同工作表的引用范围，例如假设当前工作表为「苹果」，则「微软::表格 1::工资 Michael」表示「“微软”工作表中名称为“表格 1”的表格中，“工资”列“Michael”行的数值」；对于当前工作表的数据，则不需要第一个「::」前面的工作表范围，即「工资 Michael」表示「“苹果”工作表中“工资”列“Michael”行的数值」（当然如果当前工作表下有多个表格的话还是需要区分开的）。通过简单的点击，Numbers 就能够自动使用正确的表内引用和表间引用格式。在公式需要输入数据的地方，点击当前工作表的数据就是表内引用，点击其他工作表的数据就是表间引用。下面用一个动图来显示一下具体的操作</p>
<figure data-type="image" tabindex="12"><img src="https://andy_luo.gitee.io/blog_image_bed/img/reference.gif" alt="表内引用和表间引用" loading="lazy"></figure>
<blockquote>
<p>关于 Numbers 公式的更多帮助，可以点击菜单栏的「帮助」-&gt;「公式与函数帮助」查看更加详尽的<a href="https://support.apple.com/zh-cn/guide/functions/welcome/web">官方文档</a></p>
</blockquote>
<h3 id="数据整理与分析">数据整理与分析</h3>
<p>除了使表格看上去更加赏心悦目以外，表格的一个重要功能就是对数据进行整理。下面介绍一下 Numbers 的数据整理方法。</p>
<p>在选定了有内容的单元格后，Numbers 会自动对选中内容进行一个简单的统计，并显示在软件下方，默认显示的内容是。可以点击右方的齿轮更改成自己最常用的统计功能。</p>
<figure data-type="image" tabindex="13"><img src="https://andy_luo.gitee.io/blog_image_bed/img/v2-c02533233c77b1b99a1e65b50741375c_1440w.png" alt="对单元格内容进行自动统计" loading="lazy"></figure>
<p>在选定了需要进行整理的单元格后，在 Numbers 的右侧检查器面板中可以选择「整理」，即可对选中的单元格内容进行整理，可用的操作包括分类、排序和过滤。</p>
<ol>
<li>
<p>分类：Numbers 会将每一列的表头看作为一个「类别」。点击「添加类别」的下拉菜单，可以将表格按照各个类别的值进行分类显示。可以选择多个类别对表格内容进行分类显示。其中，「隐藏列」可以使该类别的数据在表格中隐藏起来（因为已经按照这个类别进行分类了，同一个分类下的值时相同的，略显多余）。一个例子如下图：</p>
<p><img src="https://andy_luo.gitee.io/blog_image_bed/img/v2-2e9d487b7bc14f17a25f3380683d4199_1440w.jpg" alt="分类前" loading="lazy"><br>
<img src="https://andy_luo.gitee.io/blog_image_bed/img/v2-c98b6f04cd2f038ceb8127637a658a3e_1440w.jpg" alt="分类后" loading="lazy"></p>
<p>例如，我想要查看表格中的男女员工在不同部门中的分布情况，则可以依次选择「性别」和「部门」两个分类，就能够看到男员工的部门分布和女员工的部门分布。点击右侧的垃圾桶图标可以删除该分类显示，拖拽左侧的横线可以对分类显示的先后顺序进行排序，表格中的显示会即时进行更新。</p>
<p>利用分类功能，可以快速地将表格数据按照一定的分类标准分离开，从而更加直观地获知数据的分布情况。</p>
</li>
<li>
<p>排序：Numbers 能够根据给定列的值，对整个表格或选定的行进行排序。在「整理」检查器的「排序」页中，可以通过下拉菜单选择「对整个表格排序」和「对所选行排序」。通过「添加列...」下拉菜单可以添加需要排序的列。一个例子如下图：</p>
<p><img src="https://andy_luo.gitee.io/blog_image_bed/img/v2-2e9d487b7bc14f17a25f3380683d4199_1440w-2.jpg" alt="排序前" loading="lazy"><br>
<img src="https://andy_luo.gitee.io/blog_image_bed/img/v2-b336b02263f12e4ec6e2d0dda4e3ce05_1440w.jpg" alt="排序后" loading="lazy"></p>
<p>例如，我想要在不同部门的分类基础上，将员工的工资按照降序排列，则可以在按「部门」分类的基础上，添加「工资」列进行排序，并选择「降序」。和分类一样，可以选择多个列对表格内容进行排序，点击右侧的垃圾桶图标可以删除该排序显示，拖拽左侧的横线可以对排序显示的先后顺序进行排序，表格中的显示会即时进行更新。<br>
利用排序功能，可以快速将表格数据按照一定的规律进行重新排列。</p>
</li>
<li>
<p>过滤：Numbers 能够根据给定的条件，筛选出符合条件的数据。借助条件表达式的概念，可以选择「匹配所有过滤条件」和「匹配任意过滤条件」，这两个分别是「与」和「或」的逻辑关系。一个例子如下图：</p>
<p><img src="https://andy_luo.gitee.io/blog_image_bed/img/v2-2e9d487b7bc14f17a25f3380683d4199_1440w-3.jpg" alt="过滤前" loading="lazy"><br>
<img src="https://andy_luo.gitee.io/blog_image_bed/img/v2-45dab25fc7265c246965c3c8a76df0b8_1440w.jpg" alt="过滤后" loading="lazy"></p>
<p>例如，我想要在不同部门的分类基础上，查找等级为 A 的员工，则可以在按「部门」分类的基础上，选择「员工等级」「是」「A」的过滤条件。过滤功能同样可以选择多个过滤条件对表格内容进行过滤，点击右侧的垃圾桶图标可以删除该过滤条件，拖拽左侧的横线可以对过滤条件的先后顺序进行排序，表格中的显示会即时进行更新。除此之外，点击「添加规则」还可以对已有的过滤条件追加新的规则，以实现更加复杂的逻辑关系。</p>
<blockquote>
<p>过滤与分类在功能上有一定的重叠之处——分类是「将原数据按照一定的类别进行重新排列」，而过滤则是「仅显示满足某些条件的数据」。</p>
</blockquote>
</li>
</ol>
<p>除了对表格数据进行分类、排序和过滤之外，Numbers 还提供了多种图标绘制的选项。点击工具栏的图标，即可选择插入不同类型的图表。图表类型包括「二维」、「三维」和「交互式」三种，前两种图表又可继续划分为柱状图、饼图、折线图等不同类型的图表，「交互式」则可以对图表进行操作，并对选中的数据进行动态的显示。</p>
<figure data-type="image" tabindex="14"><img src="https://andy_luo.gitee.io/blog_image_bed/img/v2-2c4426da8793ba77fa3f1d04b3d05e67_1440w.jpg" alt="插入图表" loading="lazy"></figure>
<p>创建图表后，点击「添加图表数据」即可选择图表的数据来源，在左下角可以选择「根据列绘制序列」或「根据行绘制序列」，前者以各行的值作为横坐标、各列的值作为纵坐标，后者以各列的值作为横坐标、各行的值作为纵坐标，在使用的时候注意区分。选中图表后，右侧检查器栏会显示对当前选中图表的样式设置：「图表」页包含对图表本身的设置，例如图表选项（标题、图例、边框等）、图表字体、图表颜色等；「坐标轴」页包含对柱状图 X 轴和 Y 轴的标签、刻度线、标度等内容的设置；「扇区」页包含对饼图每一块分区的标签、位置等内容的设置；「序列」页包含对图表一维数据的设置，还可以添加趋势线和误差线等。检查器栏的页签会根据图表类型的不同而发生相应的变化，具体的设置可以自行尝试。</p>
<p>二维和三维图表是平时我们最常见的图表，能够对某一类数据的进行可视化。例如，我想利用饼图对 Marketing 部门的工资分布情况进行可视化，则可以先对表格按「部门」进行分类，然后插入一个二维饼图，选择「根据行绘制序列」，并选择「Marketing」分类下的员工工资作为饼图数据即可。</p>
<figure data-type="image" tabindex="15"><img src="https://andy_luo.gitee.io/blog_image_bed/img/v2-bfb1f0048c0be87145fcc1ed0b59c33d_1440w.jpg" alt="二维饼图示例" loading="lazy"></figure>
<p>交互式图表允许使用者对图表进行操作，查看在一定范围或一定时间段内，某类数据的动态变化情况。交互式图表的数据添加方式和二维、三维图表相同。由于我没有使用过这个表格，仅仅是试着看了一下效果，因此没有办法给出使用教程，有兴趣的可以参阅「Numbers 表格帮助」的内容。</p>
<figure data-type="image" tabindex="16"><img src="https://andy_luo.gitee.io/blog_image_bed/img/interactive_chart.gif" alt="交互式图表" loading="lazy"></figure>
<p>可以看到，Numbers 提供了简单易用的数据分析和可视化工具，帮助我们对手头上的数据进行分析和处理，对于一般场合足够使用，对于难度比较大的数据分析任务可能需要在熟悉 Numbers 使用的基础上，花点脑筋想想如何达到自己的目的了。</p>
<h3 id="其他">其他</h3>
<p>Numbers 支持以文本方式插入并显示 LaTeX 公式。点击菜单栏「插入」-&gt;「方程」，或使用快捷键 command + option + E 即可唤出 LaTeX 编辑器界面。在编辑框内输入 LaTeX 或 MathML 公式，点击插入即可。在方程编辑区域下方有一个「方程预览」区域，可以预览 LaTeX 代码的运行结果，检查 LaTeX 代码是否有误。</p>
<figure data-type="image" tabindex="17"><img src="https://andy_luo.gitee.io/blog_image_bed/img/v2-5b1f87778827128b65c76b83dd4ff71d_1440w.jpg" alt="LaTeX 公式编辑" loading="lazy"></figure>
<p>Numbers 还提供了一个类似「Time Machine」的版本复原功能，它会定期对文件的快照进行备份，供用户回到文件过去的状态。依次点击菜单栏「文件」-&gt;「复原到」-&gt;「浏览所有版本...」，可以看到当前的表格文件以类似于 Time machine 的方式呈现出来，点击上下箭头或右方的时间轴可以选择回退的时间。这一功能相当于给了用户一颗“后悔药”，即使在改错内容的情况下，也能够还原到出错之前的版本。</p>
<figure data-type="image" tabindex="18"><img src="https://andy_luo.gitee.io/blog_image_bed/img/v2-6b7dff7cd6bc91ebdb64fbdcedf99b35_1440w.jpg" alt="Numbers 版本复原功能" loading="lazy"></figure>
<h2 id="总结">总结</h2>
<p>Numbers 作为 Apple 自家的办公软件，能够满足日常生活的绝大多数场景，甚至在稍微专业一点的领域都能够游刃有余地完成数据处理与分析的任务。当然，与 Excel 这种几乎已经成为业界标准的软件比较的话，Numbers 还有很长的路要走。然而，我还是十分推荐普通的用户可以尝试一下 Numbers，因为它给了每一个人「做自己的统计学家」的机会，其内置的丰富功能能够帮助我们对自己的数据有一个更加清晰和直观的认识。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[iBooks - 如何充分利用 iCloud 和自带 App 实现 Apple 设备之间的互通]]></title>
        <id>https://AndyLuoJJ.github.io/post/ibooks-ru-he-chong-fen-li-yong-icloud-he-zi-dai-app-shi-xian-apple-she-bei-zhi-jian-de-hu-tong/</id>
        <link href="https://AndyLuoJJ.github.io/post/ibooks-ru-he-chong-fen-li-yong-icloud-he-zi-dai-app-shi-xian-apple-she-bei-zhi-jian-de-hu-tong/">
        </link>
        <updated>2020-01-28T08:55:46.000Z</updated>
        <summary type="html"><![CDATA[<p>本篇是专题「如何充分利用 iCloud 和自带 App 实现 Apple 设备之间的互通」的第三篇文章，主要介绍如何在 Apple 平台上使用 iBooks 对电子书籍进行不失深度的阅读，同时与我拥有的另一个电子设备——「当当阅读器」进行对比。</p>
]]></summary>
        <content type="html"><![CDATA[<p>本篇是专题「如何充分利用 iCloud 和自带 App 实现 Apple 设备之间的互通」的第三篇文章，主要介绍如何在 Apple 平台上使用 iBooks 对电子书籍进行不失深度的阅读，同时与我拥有的另一个电子设备——「当当阅读器」进行对比。</p>
<!-- more -->
<h2 id="why-ibooks">Why iBooks？</h2>
<p>作为一个<s>喜爱装逼</s>热爱阅读的研究生，除了阅读专业书籍和文献资料以外，我还喜欢在闲暇时间阅读一些自己喜欢的书籍。在拥有各种各样的电子设备之前，纸质版的书籍自然是不二选择。一方面，传统纸媒能够为读者带来更好的阅读体验，不容易对我们心灵的窗户产生伤害，手指划过纸张的感觉也能够加深读者对书籍的印象；另一方面，传统纸媒也承载着更多的情感，能够方便地在书上记录自己当时的感受，再次翻阅书籍的时候能够回忆起自己当初的心境。然而，传统的纸质书籍也有着难以克服的缺点：占据较多的空间，不便于保存；重量不轻，便携性较差；难以快速检索书籍上的笔记内容。当然，纸质书籍仍具有它的存在价值，电子阅读和传统阅读终究无法相互取代。</p>
<p>进入大学后，我陆续入手了当当阅读器和 iPad，电子阅读也逐渐进入到我的日常生活中，这两个设备分别代表了目前电子阅读的两个趋势：电子墨水屏的阅读器力求还原纸质阅读的感受，在功能上专注于阅读本身，抛弃了其他多余的功能，以期为读者带来更加真实的阅读体验；基于 App 的数字阅读则在便携性上更进一步，随时随地掏出手机就能开始阅读，充分利用了日常生活中的碎片时间。对于这两种电子阅读的方式，我认为它们并不冲突，它们各自有发挥特长的空间。（小孩子才做选择，大人我全都要🐶）</p>
<p>本篇文章关注的重点是基于 App 的数字阅读。由于我手头上的设备是 iPhone、iPad 和 MacBook，因此在这三个平台上我选择的是 Apple 自带的 iBooks，在 iOS 13 / iPadOS / macOS Catalina 上更名为「图书」，但我更喜欢称之为 iBooks。在我看来，iBooks 具有以下三个吸引我的特性：</p>
<ol>
<li>
<p>Apple 自带软件，质量有一定的保证，并且对于存储空间较小的设备来说，能够避免安装第三方软件，降低焦虑感。</p>
</li>
<li>
<p>原生支持 iCloud，对于拥有多台 Apple 设备的用户来说体验较好。</p>
</li>
<li>
<p>支持 PDF 和 EPUB 两种目前比较主流的电子书格式，已经能够满足我的个人需求了。（在移动端和桌面端对 PDF 和 EPUB 的支持情况存在一定的差别）</p>
</li>
</ol>
<h2 id="ibooks-多设备同步的准备工作">iBooks 多设备同步的准备工作</h2>
<p>作为 Apple 自家的软件，iBooks 对于 iCloud 的支持还是比较完善的。为了能够利用 iCloud 和 iBooks 打造个人书库，需要进行一些准备工作。</p>
<h3 id="设置-macos-端">设置 macOS 端</h3>
<p>在 macOS 上，依次点选「系统偏好设置」-&gt;「Apple ID」-&gt;「iCloud 云盘」-&gt;「选项」，然后勾选「图书」前面的复选框即可启用 iCloud 对 iBooks 的支持。</p>
<p>另外，还需要进入 iBooks 应用，依次点选「商店」-&gt;「登录」，并登录 iCloud 账号，按照提示输入账号密码后，再一次点选「商店」-&gt;「授权」-&gt;「对这台电脑授权...」，就完成了 macOS 端 iBooks 的基本设置。登录 iCloud 账号后可以通过 iCloud 同步书库内容以及书籍的阅读进度。</p>
<p>为了能够在不同设备之间同步书库内容，需要在 iBooks 的「偏好设置」-&gt;「通用」选项卡中勾选「在设备间同步精选集、书签和重点」。</p>
<h3 id="设置-ios-ipados-端">设置 iOS / iPadOS 端</h3>
<p>iOS / iPadOS 端对 iBooks 的设置是类似的，首先在「设置」-&gt;「Apple ID」-&gt;「iCloud」中开启「iCloud 云盘」以及「图书」两个选项，然后在「设置」-&gt;「图书」中开启「阅读中」和「iCloud 云盘」两个选项，就完成了移动端 iBooks 的设置。</p>
<h2 id="使用-ibooks-进行阅读">使用 iBooks 进行阅读</h2>
<p>在完成了 iBooks 的初步设置后，就能够愉快地利用 iPhone、iPad 或者 MacBook 来进行书籍的阅读。下面的讨论基于 iPad 和 MacBook 两个设备上的 iBooks 应用。</p>
<h3 id="书籍管理">书籍管理</h3>
<p>由于 iBooks 商店在国区不可用，电子书籍的添加无法在移动端进行，需要在桌面端手动进行。将下载好的 PDF 或 EPUB 文件直接拖进 macOS 端的 iBooks 应用中就能够将书籍添加到书库中，书籍文件会被复制到 iCloud 云盘中 iBooks 的对应位置，查看方法为：依次点选「系统偏好设置」-&gt;「Apple ID」-&gt;「管理...」-&gt;选择「Apple Books」-&gt;「在“访达”中显示」，就能够在 Finder 中看到 iBooks 存放文件的目录。</p>
<figure data-type="image" tabindex="1"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1580205549159.png" alt="" loading="lazy"></figure>
<p>需要注意的是，在 Finder 的「iCloud 云盘」中没有办法直接看到这个目录，必须通过上述方法才能够进入该目录。书籍文件名旁边的小云朵表示该文件只保存在云端而没有保存在本地，通过右键单击书籍文件，选择「现在下载」可以将云端文件下载到本地，或者选择「移除下载项」将本地文件删除而仅保留在云端。在 macOS 端的 iBooks 应用中打开书籍，会自动将云端的书籍文件下载到本地。至于移动端，暂时没有办法手动释放占用的空间。</p>
<p>iBooks 以「书库」和「精选集」的形式来对书籍进行管理，「书库」中的书籍就是你拥有的所有书籍。「精选集」则是自己对分类，一本书籍可以被归类到不同的「精选集」中。这种分类方式类似于 Apple Music 中「资料库」和「播放列表」的关系。在「书库」中，iBooks 还会自动将书籍按照「图书」、「有声书」、「PDF」、「作者」、「类别」等几种不同的方式进行一个简单的分类。</p>
<figure data-type="image" tabindex="2"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1580205571927.png" alt="" loading="lazy"></figure>
<p>iOS / iPadOS 端的 iBooks 应用界面经过了全新的设计，与其他 Apple 自带的 App 设计风格相近，可以方便地实现书籍的排序、切换视图、编辑等操作。</p>
<figure data-type="image" tabindex="3"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1580205592463.png" alt="" loading="lazy"></figure>
<p>在桌面端和移动端的 iBooks 中都能够直接看到书籍是被保存在云端还是保存在本地，有一朵云的书籍就是仅保存在云端上的，没有的就是保存在本地。</p>
<h3 id="书籍阅读">书籍阅读</h3>
<p>iBooks 能够识别到的书籍文件格式包括 .pdf、.epub 和 .ibooks，其中 .ibooks 是 Apple 自己设计的书籍文件格式，可以包含除了文本和图片以外的多媒体内容，例如视频、音频等，Apple 自家的教程绝大多数都是这个格式的。.ibooks 格式的电子书非常适合用来制作教学材料，能够让读者从多方面对要学习的内容有更加深刻的印象，例如 Apple Teacher 中的学习资料都是 .ibooks 格式的文件，在教程中包含大量文本以外的信息，使得学习的过程更加生动有趣。.pdf 和 .epub 则是目前比较主流的电子书格式，在 macOS 上默认使用「预览.app」打开 PDF 文件，使用内置的阅读器打开 EPUB 文件，而在移动端则都是用内置的阅读器打开 PDF 和 EPUB 文件。</p>
<p>在 iBooks 中打开书籍，就进入到书籍的阅读界面。移动端和桌面端的 iBooks 阅读界面都非常的清爽、简洁，最大限度地保留了书籍的内容，其他的功能则是缩到角落的位置，在需要的时候可以使用。常规的设置包括调整背景色、改变字体字号、调整亮度等。</p>
<figure data-type="image" tabindex="4"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1580206483990.png" alt="" loading="lazy"></figure>
<p>macOS 端点击「显示」可以选择单页或双页阅读。</p>
<figure data-type="image" tabindex="5"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1580206708812.png" alt="" loading="lazy"></figure>
<p>iPad 上可以选择滚动显示或翻页显示，如果是翻页显示的话，iPad 竖屏时为单页阅读，横屏时为双页阅读。</p>
<p>iBooks 的阅读器与其他大多数的阅读软件差别并不大（毕竟这是一个阅读器的基本素质），在较小尺寸的 iPhone 上进行阅读可能会觉得屏幕有点小，适当增大字号会看的没那么累；在 iPad 和 MacBook 就非常舒服了，「大屏幕 + 良好的屏幕素质」使读书这件事在 iPad 和 MacBook 上有着非常好的体验。</p>
<h3 id="阅读记录同步">阅读记录同步</h3>
<p>有时候，我们在电脑上阅读一本书籍，但是希望在通勤的路上能够用手机或平板继续阅读。iBooks 能够自动同步不同设备对同一本书籍的阅读进度，让用户的阅读体验更加一直、连贯。这一功能的启用不需要其他的设置，在完成了前面的基本设置后就能够享受到 iBooks 自动同步阅读进度的便利了。这一点相比于其他的阅读器来说不失为一个亮点，就我所知，第三方阅读器在跨设备同步阅读进度上的表现远没有 iBooks 好，大部分只能通过添加书签的方式来间接同步阅读进度。</p>
<h3 id="标注系统">标注系统</h3>
<p>俗话说「好记性不如烂笔头」，在阅读的时候往往需要对书上有感而发的内容进行标注，在下次翻开书籍的时候能够提醒自己。macOS 端的 iBooks 能够对 .epub 和 .ibooks 格式的文件进行比较丰富的标注，而 PDF 则可以利用「预览」打开进行标注。对于 .epub 和 .ibooks，在 macOS 端选中文本就会弹出标注框，能够添加 5 种颜色的标记和下划线标记。除了标记以外，还能够对标记的内容添加笔记，方便记录自己的想法。</p>
<figure data-type="image" tabindex="6"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1580206721423.png" alt="" loading="lazy"></figure>
<p>在 iPadOS 端，用手指长按选中文本，选择「重点」就能够对文本内容进行标记，基本操作与 macOS 端的相同。如果是使用 Apple Pencil 的话，直接用笔在文本上面拖移就能够进行标注，后续可以修改标注的样式，非常方便。</p>
<figure data-type="image" tabindex="7"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1580206731767.png" alt="" loading="lazy"></figure>
<p>在标注系统方面，iBooks 为我们提供了多种标注样式，能够对书籍进行丰富的标注，并且能够。在本文后续的讨论中会进一步介绍 iBooks 的笔记系统。值得注意的是，标注的目的是帮助我们对书的内容进行更加清晰的分类，因此最好有一套属于自己的标注系统，例如橙色表示「定义」、绿色表示「做法」、红色表示「重点」等，这样标注后的内容才不会显得很乱。</p>
<h3 id="笔记与学习">笔记与学习</h3>
<p>在对书本内容进行标注后，可以对标注的内容添加笔记，在移动端和桌面端都能够进行添加笔记的操作。</p>
<figure data-type="image" tabindex="8"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1580206739961.png" alt="" loading="lazy"></figure>
<p>在 iPad 上，选择标记好的内容，弹出框的第三个、像一个便签纸的图标就是添加和编辑笔记的按钮，添加完的笔记可以在「查看目录」中选择相应的选项卡进行查看。</p>
<figure data-type="image" tabindex="9"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1580206757083.png" alt="" loading="lazy"></figure>
<p>在 iBooks 中点击放大镜能够对书本内容和笔记内容进行检索，输入关键字就能够查找到与之相关的内容了。笔记的内容会通过 iCloud 自动同步到不同的设备上，这进一步提升了不同设备之间的协作性。</p>
<p>在笔记功能的基础上，macOS 端的 iBooks 还提供了一个非常实用的学习功能——学习卡。在笔记面板中，点击左上方的「学习」就可以对笔记内容进行学习。学习卡的正面是在书本中标记的内容或者 .ibooks 中提供的「词汇表词汇」，背面是对标记内容的笔记或者 .ibooks 中提供的对「词汇表词汇」的解释。<br>
<img src="https://andy_luo.gitee.io/blog_image_bed/img/1580206777433.png" alt="" loading="lazy"></p>
<figure data-type="image" tabindex="10"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1580206768505.png" alt="" loading="lazy"></figure>
<p>在学习卡界面的右上方可以设置「打乱学习卡」和「筛选学习卡」，可以选择不同是否显示「词汇表词汇」和显示哪些标注样式的内容。结合前面介绍的不同标注样式，在对不同的标注样式有自己的一套定义之后，就能够针对自己的实际情况——是对「定义」不熟悉还是「怎么做」不熟悉——通过学习卡筛选出自己薄弱的部分，并有针对性地进行二次复习，</p>
<p>通过「学习」功能，我们能够对书本内容进行更进一步的学习，以学习卡的形式来检验自己对书籍内容的掌握程度。比较遗憾的是，学习功能仅适用于 macOS 端的 iBooks，iOS / iPadOS 的 iBooks 暂时没有这个功能，希望 Apple 能够在后续版本中提供对学习卡功能的支持吧。</p>
<h3 id="ios-13-新引入的功能阅读目标">iOS 13 新引入的功能——阅读目标</h3>
<p>在 iOS 13 / iPadOS 中，iBooks 添加了「阅读目标」的功能，可以设置每天的阅读时间，督促自己进行阅读。要启用这个功能，首先需要在「设置」-&gt;「图书」中开启「阅读目标」；如果希望阅读 PDF 的时间也计入其中的话，还需要开启下面的「包括 PDF」。</p>
<p>设置完成后，iBooks 就能够帮助我们记录阅读时长。可以在 iBooks 中调整每天的阅读时长，也可以分享自己的每天的阅读进度。阅读目标在多个设备上是累积统计的，即总的阅读时长等于在各个设备上的阅读时长的总和。坚持记录自己的阅读时间，在下一次年度总结的时候也可以用来衡量一下自己年初定下的目标是不是实现了呢。</p>
<figure data-type="image" tabindex="11"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1580206784321.png" alt="" loading="lazy"></figure>
<h2 id="与其他阅读方式的对比">与其他阅读方式的对比</h2>
<p>如今，纸质书和电子阅读二分天下，分别有各自的拥护者。下面我对几种目前常见的阅读方式进行一个简单的对比，仅代表我自己的主观感受。</p>
<h3 id="ibooks-vs-纸质书">「iBooks」 V.S. 「纸质书」</h3>
<p>电子阅读和纸质阅读的对比是一个永远也跨不过去的坎，纸质书作为一个存在了上千年的实体，在电子书出现之前一直都是。时至今日，纸质书依然受到许多人的欢迎。在我看来，纸质书和电子书是两个相辅相成的阅读方式，不可能互相取代，它们有各自的应用场景。</p>
<p>回到 iBooks 和纸质书的对比上，我认为两者各自的优势分别是：</p>
<ul>
<li>
<p>iBooks 优势</p>
<ul>
<li>能够快速定位笔记和标注，更加强大的搜索功能，管理更加方便；</li>
<li>成本相对纸质书来说要低，更方便利用碎片时间进行阅读。</li>
</ul>
</li>
<li>
<p>纸质书优势：</p>
<ul>
<li>更有质感，视觉效果最好，不容易伤眼；</li>
<li>专注阅读时的干扰较少；</li>
<li>具有收藏意义。</li>
</ul>
</li>
</ul>
<p>可以看到，iBooks 代表的电子阅读更适合在移动场景中进行阅读，借助于优秀的软件，也能够对书籍进行深度阅读；而纸质书由于需要占据一定的空间，不方便携带，更适合在固定的场所进行阅读。除此之外，两者的区别并不大。</p>
<h3 id="ibooks-vs-当当阅读器">「iBooks」 V.S. 「当当阅读器」</h3>
<p>我手头上的电子墨水阅读器是「当当阅读器」。之所以选择了这一款阅读器而不是大名鼎鼎的 Kindle，是因为：</p>
<ol>
<li>
<p>当当阅读器的价格更加合理，700 出头的价格对标 Kindle Paperwhite；</p>
</li>
<li>
<p>书籍管理更方便，支持多种电子书格式，用数据线就能够管理书籍，不像 Kindle 的传书过程比较麻烦；</p>
</li>
<li>
<p>支持国产！</p>
</li>
</ol>
<p>iBooks 和当当阅读器的对比本质上是「基于 App 的数字阅读」和「电子墨水屏阅读」之间的对比，我认为两者各自的优势分别是：</p>
<ul>
<li>
<p>iBooks 优势</p>
<ul>
<li>处理速度更快，翻页不用等待屏幕刷新；</li>
<li>跨平台/设备同步，在手机、平板或者电脑上安装对应的 App 就能阅读，不需要单独的硬件设备；</li>
<li>做笔记更加方便，电子墨水阅读器记笔记简直就是灾难。</li>
</ul>
</li>
<li>
<p>电子墨水阅读器优势：</p>
<ul>
<li>墨水屏不容易伤眼，阅读过程中产生的干扰较少；</li>
<li>尺寸小巧玲珑，便于携带；</li>
<li>整合书城的图书资源，如当当和亚马逊，搜索图书资源非常快捷方便；</li>
<li>漫画神器。</li>
</ul>
</li>
</ul>
<p>就我自己来说，其实这三种阅读方式都占据着我生活的一个重要的部分（不然我也不会三个都有了），纸质书是一种收藏和精致阅读的象征，iBooks 代表着便利的跨设备阅读，而电子墨水阅读器基本上是纸质书的替代品，看小说和漫画的时候是不二选择。</p>
<h2 id="结束语">结束语</h2>
<p>早期的 iBooks 确实比较难用，基本上只能当作一个图书管理软件来使用，而第三方的图书管理软件如 Calibre 等做得比 iBooks 好太多。但随着版本的不断更替，iBooks 逐渐成长为一款能够担起一定阅读任务的阅读器，得益于 macOS 平台的优势，对于 PDF 和 EPUB 两种格式的文件都能够有比较好的支持，在标注系统上已经能够比肩专业的阅读器，独具特色的「学习」功能使 iBooks 具备了深度阅读的能力，能够对书本知识进行二次学习，从而形成一个正反馈的过程，这与 MarginNote 的思路是非常相近的。但是 iBooks 也存在需要改进的地方，包括支持的电子书格式较少、移动端书籍文件管理不太方便等。</p>
<p>总的来说，借助于 iCloud 服务，我认为普通用户完全能够使用 iBooks 来对书籍资料进行一个较为深入的阅读、消化，实现对自己的升华。</p>
<p>或许，你可以尝试着用 iBooks 开始阅读一本有深度的书籍了？</p>
<hr>
<p>本文为原创文章，转载请注明。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Zotero 跨设备文献管理]]></title>
        <id>https://AndyLuoJJ.github.io/post/zotero-kua-she-bei-wen-xian-guan-li/</id>
        <link href="https://AndyLuoJJ.github.io/post/zotero-kua-she-bei-wen-xian-guan-li/">
        </link>
        <updated>2020-01-15T11:43:04.000Z</updated>
        <summary type="html"><![CDATA[<p>听说 iPad 除了用来盖泡面和吃灰，还能够用来看文献呢。</p>
]]></summary>
        <content type="html"><![CDATA[<p>听说 iPad 除了用来盖泡面和吃灰，还能够用来看文献呢。</p>
<!-- more -->
<h1 id="介绍">介绍</h1>
<p>作为一名有着大量文献阅读需求的工科研究生，我通常是采用「打印 + 电脑」的方式对文献资料进行学习，这里的文献除了期刊论文、学位论文等文章以外，还包括了专业书籍等「大部头」的内容。对于电子版的专业书籍，我通常是在 MarginNote 这款软件上进行学习的，这是一款非常棒的阅读软件，集合了 PDF 阅读器、思维导图、复习卡等多种不同的学习功能，能够帮助我对书籍的知识按照自己的方法重新进行梳理、消化，全方面地对书本知识进行掌握，真正变成自己学到的知识（没有收广告费的呀）。而对于期刊论文，我通常是打印成纸质版，用普通的中性笔和荧光笔进行标注，传统的纸媒让我能够更快地定位到自己感兴趣的部分，从而判断是否需要对这篇文章精读；传统的标注工具从小学就开始使用了，完全不存在使用门槛的问题。</p>
<p>在去年年末购入了 iPad 2019 和 Apple Pencil 后，我尝试着将文献阅读的任务转移到 iPad 上进行，一方面，「iPad + Apple Pencil」的组合能够最大化模拟传统纸笔，在阅读文献的时候能够有更好的体验；另一方面，就我个人来说，在电脑上进行文献阅读还是比较容易受到干扰的，总会<s>一不小心</s>就打开视频、游戏什么的，导致工作流程中断。为了能够充分发挥 iPad 和 Mac 各自的优势，我希望最后达到的效果是在 iPad 上进行文献的阅读、标注，在 Mac 上进行文献的收集和管理，两台设备各司其职，又能够进行同步。</p>
<p>然而，随着文献数量的不断增多，如何对大量的文献进行有效的管理就成了一个急需解决的问题。在学习和研究的过程中，往往需要涉猎许多不同主题、不同方向的文献，如果只是简单地用「文件夹 + 重命名」的方式进行管理，需要花费不小的精力。经过一段时间的摸索后，我探索出了使用「文献管理软件 + 云盘」方式实现我需要的工作流。</p>
<blockquote>
<p>本文的讨论主要针对期刊论文等文献的管理，对于专业书籍，我更倾向于在 MarginNote 中进行学习和管理，有兴趣的读者可以看一看我的 MarginNote 使用心得。</p>
</blockquote>
<h1 id="zotero开源免费的文献管理软件">Zotero——开源免费的文献管理软件</h1>
<p>文献管理软件是一种专门用于文献的整理、使用的软件，能够对文献进行分类管理、导出引用等操作。常见的文献管理软件包括 Zotero、Mendeley、EndNote 等，这三款软件都是跨平台的软件，在 Windows 和 macOS 上都有对应的版本可以安装。在根据下面的表格对比了这三款软件后，我最终选择了 Zotero 这款免费开源的文献管理软件。</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Zotero</th>
<th style="text-align:center">Mendeley</th>
<th style="text-align:center">EndNote</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">价格</td>
<td style="text-align:center">免费</td>
<td style="text-align:center">免费</td>
<td style="text-align:center">收费</td>
</tr>
<tr>
<td style="text-align:center">Catalina 兼容性</td>
<td style="text-align:center">兼容</td>
<td style="text-align:center">兼容</td>
<td style="text-align:center">不兼容</td>
</tr>
<tr>
<td style="text-align:center">是否需要注册账号</td>
<td style="text-align:center">无需注册即可使用</td>
<td style="text-align:center">必须注册才能使用</td>
<td style="text-align:center">无需注册也能使用</td>
</tr>
<tr>
<td style="text-align:center">UI 设计</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">一般</td>
<td style="text-align:center">较好</td>
</tr>
<tr>
<td style="text-align:center">云同步</td>
<td style="text-align:center">能够使用第三方云盘进行同步</td>
<td style="text-align:center">自带云同步，但速度比较慢</td>
<td style="text-align:center">注册后可以使用自带的云同步</td>
</tr>
<tr>
<td style="text-align:center">引用功能</td>
<td style="text-align:center">自带的比较弱，但是有丰富的插件</td>
<td style="text-align:center">比较强大，能识别的文献较多</td>
<td style="text-align:center">非常强大，几乎成为业界标准</td>
</tr>
</tbody>
</table>
<h2 id="软件特色">软件特色</h2>
<p>Zotero 是一款免费开源的全平台文献管理软件，提供 Windows、macOS、Linux 三大操作系统的客户端下载，并且兼容 macOS Catalina。比较可惜的是 Zotero 没有官方的移动端应用，也没有内置 PDF 阅读器，但是换来的是更加轻便和自由的体验。</p>
<figure data-type="image" tabindex="1"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1579152052654.png" alt="" loading="lazy"></figure>
<p>作为一款开源软件，Zotero 的 UI 设计只能说是中规中矩吧，通过图标来表示不同的功能选项，简单明了。</p>
<h2 id="安装与使用方法">安装与使用方法</h2>
<p>软件安装非常简单，直接在 <a href="https://www.zotero.org">Zotero 官网</a>下载对应版本的安装包即可。Mac 端下载的是常见的 DMG 文件，双击加载后将应用拖拽到「应用程序」目录下即可。</p>
<h3 id="文献收集与管理">文献收集与管理</h3>
<p>将下载到的 PDF 文件直接拖拽到应用中就能够在，Zotero 会将 PDF 文件复制到默认文档路径中，在 macOS 上的默认路径是 ~/Zotero，可以点击左上方的按钮或者在侧边栏中点击鼠标右键，新建分类或新建文库对文献做进一步的整理。</p>
<p>对于期刊论文等文献，如果是在期刊的官网或者 Google 学术中下载的，大部分是会带有元数据的，这些元数据包括期刊名称、作者、发表时间等。文献的元数据是导出引用格式的基础，Zotero 通过元数据的信息来生成对该文献的应用。对于一些无法读取到元数据的文件，可以在 Zotero 中「右键单击文件」-&gt;「创建父条目」，并在下方的信息栏中输入相应的信息。</p>
<p>值得注意的是，<em>分类并不对应硬盘中的实际目录</em>。一份文献可以同时存在于多个不同分类中，但是它们都是对应于同一个 PDF 文件的。对于已经存在于某个分类中的文献，如果将它拖拽到另一个分类中，就会在新的分类下把这个文献添加进去。也就是说，Zotero 的分类系统并不是单纯的树形关系，更像是在给文献打标签，一篇文献可以有多个标签，即一份文献可以存在于多个分类中。</p>
<h3 id="创建文献引用">创建文献引用</h3>
<p>在引用参考文献的时候，需要根据一定的格式对参考文献进行引用标注。手动一个一个输入的效率非常低，并且极易出错，而 Zotero 能够帮助你创建符合规范的引用格式。右键单击想要创建引用的文献，选择「由所选条目创建引文目录」，就会弹出对话框：</p>
<figure data-type="image" tabindex="2"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1579152091981.png" alt="" loading="lazy"></figure>
<p>Zotero 内置了不少的引用样式，可以点击「管理样式...」添加新的样式，并且支持自定义样式，通过编辑 XML 文件模板就能够创建自己想要的样式了。选择好想要用的样式后，可以选择将样式导出为 RTF、HTML 或复制到剪贴板。经实测，Zotero 自带的样式管理功能还是比较弱，但是相信在开源社区有功能更加丰富的插件可以选择。</p>
<blockquote>
<p>当然，Google 学术也提供了类似的功能。</p>
</blockquote>
<h3 id="与-word-的整合">与 Word 的整合</h3>
<p>如果使用 Word 或者 LibreOffice 来完成文章的撰写，Zotero 提供了对应的插件，可以直接将生成的引用插入到文档中。在「首选项」-&gt;「引用」-&gt;「文字处理软件」中就可以安装 Word 或者 LibreOffice 的插件了。由于我没有使用过这个功能，有需要的读者可以自行查找相关的资料。</p>
<h2 id="存在的不足">存在的不足</h2>
<p>作为一款免费软件，Zotero 具备了比较强大的文献管理功能。得益于开源社区的贡献，Zotero 有着丰富的插件，可以满足不同的需求。</p>
<p>但是在使用 Zotero 的过程中，我发现还是有两个比较影响使用的问题的：</p>
<ol>
<li>部分 PDF 文件无法导入元数据，大部分原因是 PDF 自身没有元数据，PDF 以外的格式的文件通常也是无法被 Zotero 识别到的。</li>
<li>无法通过文献所在的文件夹来区分文献的类别。Zotero 储存 PDF 文件的路径是 ~/Zotero/storage，在该目录下的文件夹名称都是有数字和字母组成的字符串，而并不是我们在 Zotero 中创建的分类的名字，因此想要在这个目录下面找到自己想要的文献几乎是不可能的。</li>
</ol>
<figure data-type="image" tabindex="3"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1579152126827.png" alt="" loading="lazy"></figure>
<p>第一个问题能够通过手动添加文献信息勉强解决，但是第二个问题，对于想要在 iPad 上阅读文献的我来说，着实是一个不好解决的问题。好在，我发现了一个强大的插件——ZotFile。</p>
<h1 id="zotfile强大的-zotero-文件管理插件">ZotFile——强大的 Zotero 文件管理插件</h1>
<h2 id="功能与特点">功能与特点</h2>
<p>ZotFile 是一个 Zotero 的插件，能够实现文件夹/文件重命名、将文件发送到另一个位置等功能。它解决了上面提到的 Zotero 文件夹名称无法辨识的问题，使得我们的文件能够按照我们的分类进行重命名，并发送到另外一个位置上。这样，在 iPad 中就可以通过新的位置来读取到文献的 PDF 文件，在标注完成后，可以通过 ZotFile 取回标注后的 PDF 文件，覆盖电脑上的文件，从而实现桌面端和移动端的联动。</p>
<h2 id="安装与设置">安装与设置</h2>
<p>在 <a href="http://zotfile.com">ZotFile 官网</a>下载插件后，打开 Zotero，在「工具」-&gt;「插件」中，点击右上角的齿轮，选择「Install Add-on From File...」，选择下载好的插件压缩包，即可完成 ZotFile 的安装。</p>
<figure data-type="image" tabindex="4"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1579152159604.png" alt="" loading="lazy"></figure>
<p>安装完成后，在「工具」中可以看到多了一个「ZotFile Preferences...」的选项，点击可以对 ZotFile 进行设置，总共有四个选项卡：</p>
<ul>
<li>General Settings：ZotFile 可以在一个指定的目录内容发生变化的时候，将新的文件自动导入到 Zotero 中。可以专门设置一个文件夹作为中转站，将要导入的文献放进去，ZotFile 就会自动将文献导入到 Zotero 中。</li>
</ul>
<figure data-type="image" tabindex="5"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1579152150228.png" alt="" loading="lazy"></figure>
<ul>
<li>Tablet Settings：ZotFile 可以将文献发送到一个指定的目录中，同时还可以将文献取回来。我们需要勾选「Use ZotFile to send and get files from tablet」，并在「Base Folder」处选择一个文件夹，这个文件夹就是 ZotFile 发送文献的目标位置。为了让这个位置能够被 iPad 读取到，我将它设置成了 iCloud 中的一个目录。最后需要选择的选项是「Create subfolders from zotero collections」，在发送到目标位置后根据文献在 Zotero 分类中的位置创建子文件夹，方便根据自己在 Zotero 中的分类情况来管理文献；「Rename files when they are sent to the tablet」，对原 PDF 进行重命名；「Automatically extract annotations when getting PDFs back from tablet」，自动提取在 iPad 上对文献的标注内容。</li>
</ul>
<figure data-type="image" tabindex="6"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1579152172620.png" alt="" loading="lazy"></figure>
<ul>
<li>Renaming Rules：设置 ZotFile 在发送至目标位置时对原 PDF 文件进行重命名的规则。在网上下载到的 PDF 文件名往往凌乱不堪（尤其是从 arXiv 上下载到的文献），如果有需要的话，可以通过 ZotFile 对文件名进行自动重命名。ZotFile 可以针对专利和专利以外的文件区分不同的命名方式，具体的占位符格式需要参考 ZotFile 的文档。这里我设置的是「文献题目 - 作者」的格式，这样比较方便在同一分类下快速找到自己想要看的文献。</li>
</ul>
<figure data-type="image" tabindex="7"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1579152177782.png" alt="" loading="lazy"></figure>
<ul>
<li>Advanced Settings：高级设置，普通使用下一般无需理会。</li>
</ul>
<h1 id="实现-ipad-与-mac-之间的联动">实现 iPad 与 Mac 之间的联动</h1>
<p>下面简单介绍一下我是如何利用「Zotero + ZotFile + iCloud」的组合来实现文献阅读任务在 iPad 与 Mac 之间的联动的。</p>
<h2 id="桌面端进行文献保存和管理">桌面端进行文献保存和管理</h2>
<p>桌面端负责的是文献收集、保存与管理，在网络上搜索并下载文献后，拖拽到 Zotero 中保存，并创建自定义分类进行分类管理。我自己的习惯是按照文献的主题进行分类，具体方向再进行二次分类，另外在 arXiv 上看到但是没有正式发表的文献单独创建一个新的分类。在文献的备份方面，我将 Zotero 的默认文件保存路径修改为 OneDrive 上的目录，通过云盘进行备份，手动修改 Zotero 默认的文件存储路径的方式为：「首选项」-&gt;「高级」-&gt;「文件和文件夹」-&gt;「数据存储位置」。这里建议的操作是将原来的默认文件夹复制一份到想要切换的目录，然后在首选项中更改路径就可以了，原来的默认文件夹可以删除。</p>
<figure data-type="image" tabindex="8"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1579152239572.png" alt="" loading="lazy"></figure>
<p>实测 OneDrive 的传输速度还是可以的，Zotero 的数据库会时常发生变动，通过 OneDrive 就能够对文献进行实时备份了，再也不用担心电脑故障导致辛苦收集的文献全部丢失的问题了。</p>
<h2 id="移动端进行文献阅读">移动端进行文献阅读</h2>
<p>移动端负责的是文献阅读与标注，在 Zotero 完成文献的管理后，将想看的文献发送到 iPad 上进行阅读，完成 ZotFile 的设置后，对于我们想要发送到 iPad 上的文献，右键单击，依次选择「Manage Attachments 」-&gt;「Send to subfolders on tablet」，就能够将文献按照其在 Zotero 自定义分类中的情况，创建相应的子文件夹，发送到先前设定到的目标位置。</p>
<figure data-type="image" tabindex="9"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1579152321819.png" alt="" loading="lazy"></figure>
<p>这里其实还有一个选项，直接就是「Send to tablet」，这个选项只会将 PDF 文件发送过去，而不会创建子文件夹，对于一些临时看的文献可以选择该选项。我选择将文献发送到 iCloud 的一个文件夹中，便于在 iPad 上进行访问。发送完成后，可以在 Zotero 的侧边栏发现新增了两个分类，分别为「Tablet Files」和「Tablet Files (modified) 」，前者里面放的就是我们发送到平板上的所有文件（其实这也是类似于打标签）。</p>
<p>发送到 iPad 后，就可以利用各种 PDF 阅读器对文献进行标注。自带的「文件」能够进行简单的批注，实际上手时也发现足够自己使用了，但是有一个我个人不太喜欢的问题，就是「文件」会挡住文献的右边缘，不利于充分利用空间。为了尽可能模拟在纸张上阅读文献的感觉，我找到了一个叫做「PDF Viewer」的免费软件，解决了边缘空白无法利用的问题。</p>
<p>在 iPad 上完成文献的阅读后，进入 Zotero，在「Tablet Files」分类中找到想要取回的文献，右键单击，依次选择「Manage Attachments 」-&gt;「Get from Tablet」，就可以将标注后的 PDF 文件重新取回到 Zotero 的文件存储位置，并覆盖原来的文件，使得标注的内容得以同步。标注后的 PDF 文件体积通常会变大不少。</p>
<p>软件设置好了以后，硬件也得设置好。Apple Pencil 抓着容易打滑，并且书写还是有一定的声音的，于是我就加了两个笔套：</p>
<figure data-type="image" tabindex="10"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1579152284034.jpg" alt="" loading="lazy"></figure>
<p>笔尖套是淘宝上十几块钱十个的，防滑套是从晨光笔上弄下来的😂。</p>
<h1 id="one-more-thing关于-marginnote">One More Thing——关于 MarginNote</h1>
<h2 id="对-marginnote-的评价">对 MarginNote 的评价</h2>
<p>MarginNote 是一款非常棒的「学习软件」，它做到的是「对知识的重新整理」，在对书籍进行初步阅读后，通过思维导图和复习卡，实现对书本内容的重组，然后进一步对书本内容进行精读，抓住重要的知识点，加深自己的理解。我在 MarginNote 2 的时候就已经付费购买了 Mac 端的 MarginNote，后来在「数码荔枝」处购买了一年订阅（没有收广告费的呀x2），iPad 上也准备购买，这是一个绝对物超所值的软件。</p>
<h2 id="为什么在该应用场景不适宜使用-marginnote">为什么在该应用场景不适宜使用 MarginNote？</h2>
<p>既然 MarginNote 有着如此优秀的阅读体验，为什么我没有利用 MarginNote 来进行文献管理和阅读呢？</p>
<p>首先，MarginNote 在文献管理上不如专业的文献管理软件，一旦文档数量比较多，对所有文档一个一个打标签会很麻烦。其次，MarginNote 对文档的标注仅在软件内部可见，标注的笔记内容像是一个图层一样，覆盖在文档上，想要在其他软件中看到标注内容只能重新导出为 PDF，但是重新导出后的 PDF 元数据会发生变更。再者，MarginNote 能够兼容的云盘数量不多，iCloud 基本上是唯一的选择，免费的 5G 空间稍显不足，在不对 iCloud 空间进行扩容的情况下并非最好的选择。这三个原因使得 MarginNote 在期刊文献管理与阅读的任务上难以满足我的个人需求。</p>
<h2 id="marginnote-最佳的应用场合">MarginNote 最佳的应用场合</h2>
<p>我认为 MarginNote 最适合用来对专业书籍进行学习，专业书籍往往包含丰富的内容，需要我们进行消化再吸收，成为自己的知识，而 MarginNote 能够很好地帮助我们对系统的知识进行系统的学习。</p>
<h1 id="总结">总结</h1>
<p>本文探讨了如何使用文献管理软件 Zotero 对文献进行管理的方法，结合 ZotFile 插件和 iCloud 等云盘，实现了「在桌面端管理文献，在移动端阅读文献，两者同步」的工作流，使得文献阅读和管理的工作能够在 iPad 和 Mac 上联动。</p>
<p>还是那句老话，工具是为人服务的，有了趁手的工具，认真干活才是正路。</p>
<hr>
<p>本文为原创文章，转载请注明。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[我的2019年度总结]]></title>
        <id>https://AndyLuoJJ.github.io/post/wo-de-2019-nian-du-zong-jie/</id>
        <link href="https://AndyLuoJJ.github.io/post/wo-de-2019-nian-du-zong-jie/">
        </link>
        <updated>2020-01-02T04:00:32.000Z</updated>
        <content type="html"><![CDATA[<p>Unexpected 2019</p>
<p>这是我在 2018 年底完全不会预想到的一年</p>
<p>还算顺利地完成本科毕设，熬过了线性系统，开始了研究生阶段的学习。本科的小伙伴们都各自为了自己的梦想在努力拼搏，希望大家以后能保持联系😊</p>
<figure data-type="image" tabindex="1"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1579079123441.JPG" alt="最帅的时刻估计就是停留在毕业照了" loading="lazy"></figure>
<p>很幸运地获得了 WWDC Scholarship，认识来自世界各地的开发者们，在 San Jose 共度全球 iOS 开发者的“春晚”🎉还认识了很多志同道合的伙伴，WWDC 结束之后也还有联系，大家一起加油😄，各位大佬们带带小弟（主要还是自己菜）</p>
<figure data-type="image" tabindex="2"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1579079143541.JPG" alt="大中华区的Scholars" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1579079164087.JPG" alt="大家一起加油哇" loading="lazy"></figure>
<p>非常高兴能够有机会参加各个高校的 iOS Club 学生沙龙活动，和同学们分享一下自己的经历。其实吧我感觉好像也没有什么好分享的😂自己也是个普普通通的大学生（主要还是自己菜x2），也很羡慕能够奖项和 paper 拿到手软的各种大神，希望自己在接下来的一年也能做出能让自己满意的成果吧🤗</p>
<figure data-type="image" tabindex="4"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1579079193603.JPG" alt="第一次参加的iOS Club沙龙活动" loading="lazy"></figure>
<p>在江门市中心医院认识了宝哥、业航、昌林还有医院的师兄师姐，一起度过了一段很开心很有意义的研究生活。两位桂林片王有空去找你们玩或者你们来广州我好好招待你们😃还有机会见面的😎</p>
<p>下图就当作是今年给自己的奖励啦😝穷苦学生觉得 iPad 2019 已经足够满足自己要求了，吃性能和屏幕的任务还是交给 MacBook 和 iPhone 处理比较合适，iPad 就安安静静地做好一个深度阅读器吧！</p>
<figure data-type="image" tabindex="5"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1579079200141.JPG" alt="心心念的iPad" loading="lazy"></figure>
<p>可能算今年是一个人生的关键点吧。2020加油啦💪</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[iWork - 如何充分利用 iCloud 和自带 App 实现 Apple 设备之间的互通]]></title>
        <id>https://AndyLuoJJ.github.io/post/iwork-ru-he-chong-fen-li-yong-icloud-he-zi-dai-app-shi-xian-apple-she-bei-zhi-jian-de-hu-tong/</id>
        <link href="https://AndyLuoJJ.github.io/post/iwork-ru-he-chong-fen-li-yong-icloud-he-zi-dai-app-shi-xian-apple-she-bei-zhi-jian-de-hu-tong/">
        </link>
        <updated>2019-10-06T08:20:19.000Z</updated>
        <summary type="html"><![CDATA[<p>本篇是专题「如何充分利用 iCloud 和自带 App 实现 Apple 设备之间的互通」的第二篇文章，主要介绍如何在 Apple 平台上使用 iWork 办公套件完成不过于复杂的日常任务。</p>
]]></summary>
        <content type="html"><![CDATA[<p>本篇是专题「如何充分利用 iCloud 和自带 App 实现 Apple 设备之间的互通」的第二篇文章，主要介绍如何在 Apple 平台上使用 iWork 办公套件完成不过于复杂的日常任务。</p>
<!-- more -->
<blockquote>
<p>目录</p>
<ul>
<li>办公套件的选择
<ul>
<li>Microsoft Office</li>
<li>金山 WPS</li>
<li>iWork</li>
<li>开源解决方案</li>
<li>其他</li>
</ul>
</li>
<li>iWork 在多设备上的联动
<ul>
<li>Pages</li>
<li>Numbers</li>
<li>Keynote</li>
</ul>
</li>
<li>办公套件之外的
<ul>
<li>文本文档工具
<ul>
<li>Markdown</li>
<li>LaTeX</li>
</ul>
</li>
<li>数据处理工具</li>
<li>演示文稿工具</li>
</ul>
</li>
<li>结束语</li>
</ul>
</blockquote>
<h2 id="办公套件的选择">办公套件的选择</h2>
<p>「办公套件」已经不是办公人员的专属了——无论是财务人员、行政人员、办公室白领，抑或是在校学生，都有「制作一份不错的文档<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>」这一需求。在这个计算机如此普及的时代，掌握制作文档的能力可以说是一个不可或缺的技能：一份结构清楚的报告能够向你的上级展现出自己的工作态度，同时也能帮助自己对手头上的工作有一个清晰的认识和规划；一份图文并茂的表格或许能够直观地反映出大数据中蕴藏的商机，从而挖掘出新的用户痛点；一份生动的演示文稿能够向客户展现出产品的特色与优势，为公司在客户中留下一个良好的印象。对于学生来说，完成课程论文、分析实验数据、做好自我介绍等，这些任务不但要求他们对自己「要做什么」有一个清晰的认识，还要求他们知道「要怎么做」才能够达到事半功倍的效果。可以说，制作文档的需求存在于每一个使用计算机的用户上。</p>
<p>俗话说「工欲善其事，必先利其器」，要想制作出令人赏心悦目的文档，一套趁手的办公套件是必不可少的——你总不能指望自己能够通过记事本和图片浏览器就能够在规定的时间里完成一份合格的文档吧。目前市面上常见的办公套件选择主要包括以下几种：Microsoft Office、金山 WPS、Apple iWork、开源解决方案、其他。</p>
<h3 id="microsoft-office">Microsoft Office<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></h3>
<figure data-type="image" tabindex="1"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1570350292703.jpg" alt="Microsoft Office" loading="lazy"></figure>
<p>大名鼎鼎的微软 Office，办公套件一把手，旗下的 Word、Excel 和 PowerPoint 三件套已经成为了事实上的行业标准，其余所有的办公套件都需要兼容其格式。除了三件套以外，Outlook 是一款不错的邮件客户端，OneNote 是数字笔记本的翘楚，OneDrive 为广大用户带来了云盘的新选择。随着 Office 365 的推出，其平易近人的价格和得天独厚的多平台同步优势，使其受欢迎程度只增不减。</p>
<p>macOS 下同样有对应版本的 Microsoft Office，并且随着版本的更迭，Windows 和 macOS 下制作出来的 Office 文档的兼容性在逐步提高，旧版本中可能存在的一些排版问题，在新版本中或许已经不复存在了。当然排版问题在不同版本之间的 Office 之间就已经存在了的，如果对于格式有一定要求的话，建议采用 PDF 格式在不同平台之间传输。</p>
<h3 id="金山-wps">金山 WPS<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></h3>
<figure data-type="image" tabindex="2"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1570350266253.jpg" alt="金山 WPS" loading="lazy"></figure>
<p>同样大名鼎鼎的金山 WPS~~（虽然更多的是因为它的广告）~~，据闻在微软进入中国市场之前垄断了中国的办公套件，并且拥有雷总的技术加持，金山 WPS 在今天依然受到不少人的青睐。可以说，除了 Microsoft Office 本身以外，金山 WPS 是对微软文档格式兼容得最好的一个办公套件，基本上在文本内容和格式上都不会有太大的差异，并且得益于会员制度，金山为用户提供了大量的模板，使得软件的易用程度又上升了一个台阶。</p>
<p>macOS 版本的 WPS 在 2019 年推出了正式版并上架 Mac App Store，在未登录金山账号的情况下对文档只读，并且会经常提示「登录账号以使用更多功能」，登录账号及加入会员计划后能够解锁更多功能。</p>
<h3 id="iwork">iWork<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></h3>
<figure data-type="image" tabindex="3"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1570350232646.jpg" alt="iWork" loading="lazy"></figure>
<p>为了能够在自家平台上吸引更多的用户，与竞争（微）对手（软）形成对峙的局面，Apple 开发了自家的 iWork 套件，旗下的 Pages、Numbers 和 Keynote 分别对标 Microsoft Office 的 Word、Excel 和 PowerPoint。在 2013 年 9 月 11 日 iPhone 5s、5c 发布会上，苹果表示 iWork 套件将针对新购买苹果设备的用户开放免费下载，这对于用户来说不失为一个天大的好消息。对于不少关注 Apple 的人来说，Keynote 是其中名气最大的一款软件，毕竟这是 Apple 开发布会的御用幻灯片制作软件，黑白渐变的主题也成为了苹果的一个标志。随着版本的更迭，iWork 的使用体验在逐步上升，对于一些并不过于复杂的任务已经是足够使用的了。</p>
<p>iWork 套件拥有在线版本，可以在 iCloud 网页版中对文档进行查看、编辑操作，就算没有 Mac 也能够在浏览器中体验到 iWork 套件的魅力啦。</p>
<h3 id="开源解决方案">开源解决方案<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup></h3>
<figure data-type="image" tabindex="4"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1570350312916.jpg" alt="LibreOffice" loading="lazy"></figure>
<p>如果想要使用正版办公套件，又苦于经济成本或平台限制，抑或者希望能够自己对软件的功能作出代码级别的修改，那么开源方案是一个不错的选择。在众多的开源办公套件中，LibreOffice 是笔者认为做得比较不错的，这也是内置在 Ubuntu 系统中的一个默认办公套件。在对标 Microsoft Office 上，LibreOffice 拥有 Writer、Calc、Impress，对于一般的文档编辑任务还是能够胜任的，但是在文件格式的兼容上面还有进步的空间。并且，LibreOffice 还加入了 Draw、Base 和 Math 三个新的功能，能够完成绘图、数据库管理和公式编辑的工作，对于有这方面简单需求的用户来说还是一个不错的选择。</p>
<h3 id="其他">其他</h3>
<p>当然，除了前面介绍的办公套件以外，还可以自行寻找满足需求的软件，构成属于自己的工作流。由于可能涉及到比较多小众的软件，在这里就不多介绍了，读者可以自行在各大搜索引擎中进行搜索相关领域的软件。</p>
<h2 id="iwork-在多设备上的联动">iWork 在多设备上的联动</h2>
<p>由于有 Apple 的加持，无论是在移动端还是在桌面端，iWork 能够有一致的优秀表现，并且与 iCloud 高度集成，方便用户实现对文档的共享和跨设备编辑。下面笔者将介绍自己是如何在日常的学习和生活中使用 iWork 套件满足自己对文档制作的需求的。</p>
<h3 id="pages">Pages</h3>
<p>Pages 对标 Microsoft Office Word，是 iWork 办公套件中的富文本编辑软件。</p>
<p>和大多数的文字处理软件一样，Pages 是一款「所见即所得」的软件，用户在文档中对文字内容、格式作出的任何改变都会直接影响到文档的最终效果，例如对文字的加粗、下划线等。Pages 在操作上与 Word 相差不多，用户可以方便地在右边的格式面板中对文档的格式、布局等作出修改，并在主编辑面板进行文字的编辑。</p>
<figure data-type="image" tabindex="5"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1570350338244.jpg" alt="Pages 界面" loading="lazy"></figure>
<p>除了文字以外，在 Pages 中还能插入各种各样的对象，例如图片、视频、形状、表格等，使文档不仅仅是文字的堆砌，增加文档的可读性。除了传统的文字输入外，Pages 还支持插入文本框，改变文本的线性排列结构。得益于这一点，Pages 甚至能够完成海报的制作，结合内置的模板，能够帮助用户快速完成文档的制作。</p>
<p>对于不依赖于模板的文档编辑任务，Pages 能够非常方便、快速地制作出一份符合要求的文档。在我的研究生学习生活中，曾经用 Pages 完成了「线性系统理论」课程的所有书面作业，由于这门课的作业对格式并没有太多的要求，因此使用 Pages 能够帮助我快速完成格式排版，包括列表、图片插入、公式编辑等。使用「段落格式」功能能够快速设置文本的段落层次，使文章的结构一目了然，同时有利于文章目录的制作，在这一点上我认为 Pages 的易用性和用户友好度是高于 Word 的。</p>
<figure data-type="image" tabindex="6"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1570350378242.jpg" alt="" loading="lazy"></figure>
<p>在写作业的过程中，不可避免地会遇到需要插入公式的场合。在 Word 中有内置的公式编辑器及第三方的 MathType 可以辅助公式编辑的任务，MathType 也有对应的 Mac 版本。然而，使用 Pages 内置的 LaTeX 公式编辑器同样能够编辑出非常漂亮的公式。选择「插入」-&gt;「方程」即可开始一条公式的编辑，Pages 使用 LaTeX 的语法对公式进行渲染，并且<strong>不需要</strong>额外安装 LaTeX 编译器，一切的渲染任务在 Pages 内部就能够完成。</p>
<figure data-type="image" tabindex="7"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1570350388245.jpg" alt="Pages 公式编辑" loading="lazy"></figure>
<p>在移动端上，Pages 与桌面端的差异不大，但为了适配移动端的屏幕大小，不少的功能都被隐藏在了二级菜单中，并且是以图标的形式展现出来的，不熟悉图标的话可能需要多尝试几次才能够知道图标所对应的功能。总体来说，在移动端更适合完成简单的文本编辑和浏览的任务，对于文字格式和布局的调整工作还是建议在桌面端上进行，比较方便。</p>
<h3 id="numbers">Numbers</h3>
<p>Numbers 对标 Microsoft Office Excel，是 iWork 办公套件中的数据处理软件。</p>
<p>相比于 Excel，Numbers 在使用上更加符合普通用户的习惯，常用的功能都已经有相应的实现，只需要。与 Pages 相同，Numbers 同样支持在表格文档中插入其他类型的对象，如文本框、形状、媒体文件等，使表格能够包含更多的信息，这一点在 Excel 中实现元没有 Numbers 简单易用。</p>
<p>尤其是在公式编辑的时候，在单元格中输入 = 号就能开始公式的编辑，并且在右边的面板中会显示内置的常用公式及对应的说明、注释与示例，帮助用户根据自己的需求选择合适的公式。当然，你也能够编写自己的公式来适应实际的工作需求。在单元格的引用方面，Numbers 同样支持工作表<strong>内</strong>及工作表<strong>间</strong>的数据引用，方便用户对数据作进一步的处理。</p>
<figure data-type="image" tabindex="8"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1570350408904.jpg" alt="Numbers 公式编辑界面" loading="lazy"></figure>
<p>为了充分发挥 iCloud 的同步优势<s>并且懒得多装一个 App</s>，我选择使用 Numbers 对每月的开支情况进行记录。在 Numbers 的内置模板中有一个「个人预算」的模板，能够对支出的种类、金额和时间进行记录，并用图表的方式统计各个类别的支出情况，并且可以设置预算，从而对自己的支出情况进行管理和控制。在这个记账本中就利用了工作表间的数据引用，「预算」工作表引用了「交易」工作表的数据，将每个类别的支出金额进行合计，并在「预算」工作表中绘制饼图反映各类别的支出占比，提醒自己可以在哪些方面减少自己的开支。</p>
<figure data-type="image" tabindex="9"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1570350424912.jpg" alt="Numbers 记账本" loading="lazy"></figure>
<p>对于「记账」这一应用场景，我习惯每当自己花钱的时候，就在手机上记录下这一笔交易，然后在电脑上查看当天的消费 情况，并对自己接下来的开支有一个初步的规划。虽然暂时还没能通过记账发现自己不合理的消费情况，但是养成记账的习惯起码能够知道「自己的钱有没有花在刀刃上」，帮助自己逐渐养成理财的意识和习惯。</p>
<p>相比于 Excel 来说，Numbers 确实还存在很多可以提升的地方，对于专业的数据处理任务来说 Numbers 还是难以胜任的，但是对于普通的任务来说，Numbers 已经游刃有余了。</p>
<h3 id="keynote">Keynote</h3>
<p>Keynote 对标 Microsoft Office PowerPoint，是 iWork 办公套件中的演示文稿软件。</p>
<p>幻灯片的制作可不是简单的「文字 + 图片」的机械组合，而是需要将各个元素有机地结合在一起，设计出具有美感的幻灯片。Keynote 希望用户更关注幻灯片元素之间的美妙组合，而不是把时间浪费在「寻找某个功能的按钮」上。Keynote 强大的对齐工具能够帮助用户快速对文本、图片等内容进行对齐，而在这一点上 PowerPoint 的表现就差一点了。除此之外，Keynote 的模板比 PowerPoint 更加人性化，如果只是进行一个简单的工作汇报，使用 Keynote 不仅省时省力，出来的效果还好，何乐而不为呢？</p>
<figure data-type="image" tabindex="10"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1570350438980.jpg" alt="" loading="lazy"></figure>
<p>Keynote 以其出色的动画效果而闻名，其中最强大的莫过于「神奇移动」这一动画效果，它能够平滑地移动前后两张幻灯片中的<strong>同一元素</strong>，对于文字，还可以选择「按字符」进行过渡的效果。Microsoft Office PowerPoint 直到 2016 的版本才出现了类似的动画效果，并且使用起来远没有 Keynote 简单，这应该是 iWork 办公套件中打赢的唯一一场对决吧。</p>
<figure data-type="image" tabindex="11"><img src="https://andy_luo.gitee.io/blog_image_bed/img/1570350449629.jpg" alt="Keynote 动画效果选择" loading="lazy"></figure>
<p>在移动端上，当 iPhone 和 Mac 处在同一局域网连接下时，可以将 iPhone 当作翻页笔来使用，控制幻灯片的播放，以后再也不用担心演示现场没有翻页笔的问题啦。除了翻页以外，在 iPhone 上还能够显示激光、笔画等工具，比翻页笔的功能强大的多，在演示的时候能够让用户更加专注于演讲本身而不是幻灯片。毕竟，听众是来听你演讲的，不是来看你做的幻灯片的。</p>
<h2 id="办公套件之外的">办公套件之外的</h2>
<p>工具的使用最终取决于任务的需要。实际上，除了办公套件以外，还有很多优秀的软件能够满足我们对于文档编辑的要求，将这些软件组合起来，何尝不是一个属于自己的「办公套件」呢？</p>
<h3 id="文本文档工具">文本文档工具</h3>
<p>对于文本文档编辑的任务来说，主要的需求是文字的编辑与排版。Word 和 Pages 这类「所见即所得」的富文本编辑器固然能够满足大多数人对文本编辑的需求，但，Markdown 和 LaTeX 是其中两个比较流行的文本文档工具。</p>
<h4 id="markdown">Markdown</h4>
<p>Markdown 是一种轻量级的标记语言，与传统的富文本编辑方式不同，Markdown 是纯文本的编辑方式，通过特定的符号来表示文字的格式，如<s>删除线</s>、<strong>加粗</strong>、<em>斜体</em>等。本文的撰写就是基于 Markdown 完成的。相比于 Word、Pages 等采用的富文本编辑方式，Markdown 能够使写作者更关注于文章的内容而不是格式的修改，从而提高生产力。</p>
<p>由于 Markdown 文档的编辑是以纯文本方式进行的，因此使用任何一个文本编辑器都能够完成 Markdown 文档的撰写，但是如果想要看到 Markdown 渲染后的效果，就需要一款专门的 Markdown 编辑器了。笔者使用的。目前有不少的笔记软件，如印象笔记，已经支持 Markdown 文档的编辑和渲染了，如果不想多安装一个软件的话，可以考虑使用这类软件完成 Markdown 的编写。</p>
<h4 id="latex">LaTeX</h4>
<p>LaTeX 是最好的文字排版软件，没有之一，它以类似于编译代码的方式来实现对文本格式的渲染。与 Markdown 相同，LaTeX 文档实际上也是一个纯文本文件，通过特定的字符和关键字来对格式进行规定，需要专门的 LaTeX 编译器对源文件进行编译、渲染才能够看到最终的效果。</p>
<p>LaTeX 对论文、期刊等对格式有着比较严格的要求的文章撰写中有着得天独厚的优势，但是对于普通用户来说，富文本编辑器和 Markdown 已经足够应付绝大多数的工作了，LaTeX 更加适合专业写作的人员（写文章也逃不了 debug 是什么感受）。</p>
<h3 id="数据处理工具">数据处理工具</h3>
<p>对于数据处理的任务来说，主要的需求是对已有的数据进行整理、处理和可视化等。实际上，除了已有的办公套件以外，用户并没有太多的选择，因为 Excel 已经成为了行业标准，而 Numbers 与 Excel 之间还是存在着非常大的差距的，所以对于专业的数据处理工作来说，Excel 更加靠谱一点。</p>
<p>当然，对于程序员以及硬核用户来说，可以使用更加高阶的方法对数据进行处理，如 Python、Julia、Matlab等。Excel 能够做到的是「用最简单的方式为用户提供最强大的功能」，而如果通过编程的方式对数据进行处理，能够限制你的只有你的想象力了。近年来，Python 在大数据处理领域的热度成指数上升，得益于大量第三方库，使用 Python 或许能够以更加优雅的方式实现对数据的处理和可视化，相比于 Excel 来说，Python 的可玩性只增不减。</p>
<h3 id="演示文稿工具">演示文稿工具</h3>
<p>对于演示文稿来说，主要的需求是生动地展示文档内容，通过动画实现文档内容的突出显示、前后切换等。除了 Keynote 和 PowerPoint 以外，Prezi 也是一个不错的选择，它采用非线性的方式对演示文稿进行展示，在动画切换的效果上比较有特点。由于笔者没有使用过这款软件，感兴趣的读者可以自行感受一下这款软件的魅力所在。</p>
<h2 id="结束语">结束语</h2>
<p>本文介绍了如何在 Apple 设备上使用 iWork 办公套件满足日常的文档编辑需求。相比于 Microsoft Office 来说，iWork 在功能及兼容性上都存在一定的限制，无法像 Microsoft Office 那样成为「事实上的行业标准」。但是，大而全所付出的代价是运行速度较慢、需要一定的经济成本，对于一些普通的文档编辑任务来说，使用 iWork 已经能够满足要求了，如果需要在不同平台上进行兼容，导出为 PDF 才是最好的选择。</p>
<p>那么，你准备好打开 iWork 完成你下一个编辑任务了吗😊</p>
<hr>
<hr>
<p>本文为原创文章，转载请注明。</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>在这里，「文档」的概念并不局限于文本文档，还包括表格、演示文稿等内容。 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>图片截取自 https://products.office.com/zh-cn/explore-office-for-home <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p>图片截取自 https://www.wps.cn <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p>图片截取自 https://www.apple.com/cn/iwork/ <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn5" class="footnote-item"><p>图片截取自 https://zh-cn.libreoffice.org <a href="#fnref5" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Apple File System Guide 学习笔记]]></title>
        <id>https://AndyLuoJJ.github.io/post/apple-file-system-guide-xue-xi-bi-ji/</id>
        <link href="https://AndyLuoJJ.github.io/post/apple-file-system-guide-xue-xi-bi-ji/">
        </link>
        <updated>2019-09-13T10:05:58.000Z</updated>
        <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>由于 iOS 独有的沙箱机制，每一个 iOS app 都有其独立的、与系统和其他 app 隔离开的文件系统，通常来说，开发者只能够对自己 app 的文件系统进行操作，而不能随意访问和操作其他的文件系统。</p>
<p>在iOS中，每个应用各自有着相对独立、完整的文件系统，称为应用程序沙盒，简称沙盒。</p>
<p>任何应用程序的文件访问范围都不允许超出自身沙盒的范围，即无权访问其他应用程序沙盒中的文件。但可以通过获取用户权限来使其他沙盒中的文件发送到当前沙盒中。</p>
<p>文件目录结构与macOS的文件目录结构相类似，通常是通过目录的名称来区分其作用。</p>
<p>为了对文件系统有一个更加深入的了解，本篇笔记基于 Apple 官方文档的学习，总结了 File System 的使用方法。</p>
<h2 id="file-system-basics">File System Basics</h2>
<p>下面简要介绍一下文件系统的基本知识。</p>
<h3 id="常用文件目录">常用文件目录</h3>
<ol>
<li>
<p>Documents: 文档目录，用于存放用户生成的内容、直接与用户打交道的内容，即需要永久保存下来的内容。该目录会通过iTunes和iCloud备份。</p>
</li>
<li>
<p>Documens/Inbox: 文档收件箱目录，用于存放用户允许的从外部应用中获取的文件。可以新建或删除该目录下的文件，但不允许编辑。该目录会通过iTunes和iCloud备份。</p>
</li>
<li>
<p>Library: 资源库目录，用于存放非用户生成的内容，通常是程序或系统需要用到的内部文件。可以生成自己的目录。除了Caches以外的目录会通过iTunes和iCloud备份。</p>
</li>
<li>
<p>tmp: 临时目录，用于存放临时文件，应用程序退出后该目录下的文件会被清空。该目录不会通过iTunes和iCloud备份。</p>
</li>
<li>
<p>其他文件目录：</p>
<ol>
<li>iCloud文件目录，涉及CloudKit的使用</li>
<li>查看模拟器应用沙盒：<code>~/Library/Developer/CoreSimulator/Devices/(check device number)/data/Containers/Data/Application/(check app number)</code></li>
</ol>
</li>
</ol>
<p>图解：<br>
<img src="https://andy_luo.gitee.io/blog_image_bed/img/1568369292830.jpg" alt="" loading="lazy"></p>
<h3 id="tips-for-file-system">Tips for file system</h3>
<ol>
<li>
<p>用户数据存放在Documents/中，允许用户新建、删除、编辑。</p>
</li>
<li>
<p>应用程序需要的支持文件存放在Library/Application Support/中，对用户屏蔽，包含各种保证应用程序正常运行的文件。</p>
</li>
<li>
<p>临时数据存放在tmp/中，这些文件不需要做持久化处理，使用完毕后应当删除，iOS系统会不定期清空该目录。</p>
</li>
<li>
<p>缓存文件存放在Library/Caches/中，生命周期比临时文件长，但不如支持文件长，缓存文件用于提高性能及用户体验，避免资源重复加载。iOS系统同样会清空该目录，因此应用程序应能够在需要时重新生成或下载这些缓存文件并保存在同一路径下。</p>
</li>
</ol>
<h2 id="accessing-files-and-directories">Accessing Files and Directories</h2>
<p>下面简要介绍如何访问当前沙箱下的文件及目录。</p>
<h3 id="选择合适的方式来访问文件">选择合适的方式来访问文件</h3>
<p>对于不同类型的文件来说，选择一个合适的方式来访问它们，可以更好地发挥高层 API 的作用，使得文件访问变得更加简单。Apple 对于几种常见的、基本的文件类型提供了标准的访问方法，包括：</p>
<ol>
<li>资源文件，包括Nib（Storyboard）、图片、音频、本地化资源、字符串文件等。这些与代码无关的资源文件通常用来显示本地化内容。一般是使用<code>Bundle.main.path(for resource:of type:)</code>来获取文件路径。</li>
<li>文本文件，包括txt等。文本文件是无结构的ASCII或Unicode字符，通常使用String构造器进行获取。</li>
<li>结构化数据文件：包括XML、plist等。结构化文件通常是在字符串的基础上，使用特定字符集合的数据。XML的解析有特殊的方法。</li>
<li>归档文件</li>
<li>Package</li>
<li>Bundle</li>
<li>代码文件<br>
在标准类型的文件无法满足需求的情况下，可以自定义文件后缀名，以字节流的方式对文件进行读写，能够对文件操作有更加自由的控制。</li>
</ol>
<h3 id="指定文件或目录的路径">指定文件或目录的路径</h3>
<p>通常来说，指定文件或目录路径的方式是使用<code>URL</code>，URL 的创建可以基于 String，即把路径用 String 写出来后，作为 URL init 的参数。有三种方式的URL表示路径：</p>
<ol>
<li>基于路径的URL：file://localhost/Users/andy/Documents/MyFile.txt</li>
<li>文件引用URL：file:///id=6571367.2773272/</li>
<li>基于字符串的URL：/Users/andy/Documents/MyFile.txt<br>
使用 URL 获取路径的另一个好处是能够方便地与 FileManager 结合使用，从而使文件管理变得更加简单有序。关于 FileManager 的使用后面会有进一步的文档学习介绍。</li>
</ol>
<h3 id="在文件系统中对文件进行定位">在文件系统中对文件进行定位</h3>
<p>在访问文件或目录之前，还需要对文件进行定位，常用的方式包括：</p>
<ol>
<li>自己找。</li>
<li>询问用户，可以通过 Open and Save panel 与用户进行交互。</li>
<li>在标准的系统目录下寻找，这又可以分为：
<ol>
<li>在 App Bundle 中寻找：调用<code>Bundle.main.url(for resource:with extension:)</code>获得文件在 App Bundle 中的 URL。</li>
<li>在标准目录中寻找：可以使用<code>FileManager.default.urls(for directory:in domain:)</code>来访问标准目录下的文件 URL，其中第一个参数可以搜索的范围包括 Application Support、Documents、Library 等标准沙箱路径。</li>
</ol>
</li>
<li>使用书签（bookmarks），bookmark 是 URL 的一个属性，是一个定位文件的持久化方法。</li>
</ol>
<h3 id="管理文件和目录">管理文件和目录</h3>
<p>对于文件和目录的管理，无非是创建、复制、移动、删除、隐藏文件等。</p>
<h4 id="创建">创建</h4>
<p>新建目录：使用 FileManager 的 createDirectoryAtURL 或 createDirectoryAtPath 方法在给定路径新建目录。<br>
新建文件：使用 FileManager 的 createFileAtPath:contents:attributes 方法在给定路径新建文件。如果需要将 Data 或 String 的内容写入文件，可以使用 writeToURL:atomically 方法。</p>
<h4 id="复制和移动">复制和移动</h4>
<p>使用 FileManager 的 copyItemAtURL:toURL:error: 或 copyItemAtPath:toPath:error: 方法复制文件或目录；使用 FileManager 的 moveItemAtURL:toURL:error: 或 moveItemAtPath:toPath:error: 方法移动文件或目录。</p>
<blockquote>
<p>文件备份实际上是将文件复制到一个不让用户访问到的位置。</p>
</blockquote>
<p>**注意：**文件的复制和移动操作可能需要较长的时间，并且复制和移动的操作是同步执行的，因此推荐将文件复制和移动操作放到异步线程中执行，避免阻塞主线程。</p>
<h4 id="删除">删除</h4>
<p>使用 FileManager 的 removeItemAtURL:error: 或 removeItemAtPath:error: <strong>永久删除</strong>文件或目录。</p>
<h4 id="隐藏文件">隐藏文件</h4>
<p>在 macOS 中，隐藏文件是文件名以.开头的文件，默认不会显示出来，但是用户仍然有办法访问到这些文件。对于 iOS，通常来说没有必要设置隐藏文件。</p>
<h2 id="filemanager-文档解读">FileManager 文档解读</h2>
<p>Apple 推荐的文件管理方式是使用 FileManager 进行文件路径的获取、访问、修改等操作。下面结合 FileManager 的<a href="https://developer.apple.com/documentation/foundation/filemanager">官方文档</a>进行学习，并对一些比较重要和常用的方法与属性进行记录。</p>
<h3 id="概要">概要</h3>
<p>FileManager 是 Foundation 框架中的类，帮助开发者更加方便地与文件系统进行交互，其继承于 NSObject。通过 FileManager，开发者可以对文件和目录进行定位、创建、复制、移动等操作，也可以获取到文件和目录的信息并修改它们的一些属性。<br>
定位文件可以使用 URL 或 String，更推荐 URL 是因为它可以用一种更加稳健的方式表示路径，并且 URL 提供了书签（bookmark）进一步简化文件的访问。<br>
在使用 FileManager 对文件进行操作时，具体的操作可以由遵循 FileManagerDelegate 委托来定义，通过委托模式进行实现解耦和自定义。<strong>注意在这种情况下，在执行文件操作的时候需要创建一个新的 FileManager 实例，设置其代理，然后用这个新的实例对操作进行初始化（即避免使用 share 的 FileManager 实例）</strong><br>
在 iOS 5.0 和 macOS 10.7 以后版本的系统中，还可以直接使用 FileManager  对 iCloud 中的文件进行管理，发挥 iCloud 强大的同步特性。<br>
对于多线程，share 的 FileManager 实例的方法可以安全地在多个线程中调用，即耗时操作可以放在异步线程中异步执行。<br>
对于 macOS app，FileManager 能够，这里记录的主要是在 iOS 上的使用方法，更多的使用请查阅<a href="https://developer.apple.com/documentation/foundation/filemanager">官方文档</a></p>
<h3 id="创建-filemanager-实例">创建 FileManager 实例</h3>
<p>有两种方法：</p>
<ol>
<li><code>init(authorization)</code>，初始化方法，参数为 NSWorkspace.Authorization 类型的实例，用户给予的访问文件的权限。</li>
<li><code>class var `default`</code>：FileManager 单例，app 内共享的 FileManager</li>
</ol>
<h3 id="访问用户目录">访问用户目录</h3>
<p>实际上需要访问的是用户目录和临时目录：</p>
<ul>
<li><code>func NSHomeDirectory() -&gt; String</code>：当前用户的主目录，全局函数</li>
<li><code>func NSUserName() -&gt; String</code>, <code>func NSFullUserName() -&gt; String</code>：当前用户的用户名。这两个方法是全局方法，不是 FileManager 的类方法。</li>
<li><code>var temporaryDirectory: URL</code>：当前用户的临时目录。</li>
</ul>
<h3 id="定位系统目录">定位系统目录</h3>
<ul>
<li><code>func url(for: FileManager.SearchPathDirectory, in: FileManager.SearchPathDomainMask, appropriateFor: URL?, create: Bool) -&gt; URL</code></li>
<li><code>func urls(for: FileManager.SearchPathDirectory, in: FileManager.SearchPathDomainMask) -&gt; [URL]</code>：</li>
<li><code>func NSSearchPathForDirectoriesInDomains(FileManager.SearchPathDirectory, FileManager.SearchPathDomainMask, Bool) -&gt; [String]</code><br>
上述三个方法都能够返回给定路径枚举的路径。</li>
</ul>
<h3 id="列举目录内容">列举目录内容</h3>
<ul>
<li><code>func contentsOfDirectory(atPath:) -&gt; [String]</code>；：搜索给定的路径，并给出路径下包含的内容的路径</li>
</ul>
<h3 id="创建-删除-替换-移动-复制">创建、删除、替换、移动、复制</h3>
<ul>
<li><code>func createFile(atPath:contents:attributes:) -&gt; Bool</code>：在给定路径下、使用给定的属性键值对，利用给定的Data创建文件。</li>
<li><code>func createDirectory(atPath:withIntermediateDirectories:attributes:)</code>, <code>func createDirectory(at:withIntermediateDirectories:attributes:)</code>：在给定路径下创建目录。</li>
<li><code>func removeItem(at:)</code>, <code>func removeItem(atPath:)</code>：删除给定路径的文件或目录。</li>
<li><code>func replaceItemAt(:withItemAt:backupItemName:options:)</code>： 将某个路径下的项目替换成另一路径下的项目，允许创建备份，并且可以保证没有数据丢失。</li>
<li><code>func copyItem(at:to:)</code>, <code>func copyItem(atPath:toPath:)</code>：：将某一路径下的项目复制到另一路径。</li>
<li><code>func moveItem(at:to:)</code>, <code>func moveItem(atPath:toPath:)</code>：将某一路径下的项目移动到另一路径。<br>
以上就是在普通的开发任务中比较常用的文件操作方法。</li>
</ul>
<blockquote>
<p>对于需要登录的 app，如果不想采用 Core Data 来进行用户数据的存储，可以考虑将用户的信息以文件的形式保存在本地。当然，如果这么做还需要考虑到文件的加密等安全措施。</p>
</blockquote>
<hr>
<p><em>Example code:</em></p>
<pre><code class="language-swift">// This code shows how to combine FileManager 
// and NSSearchPathForDirectoriesInDomains to deal with file system.
// create a file manager instance that manages the files in sandbox.
let manager = FileManager.default
// specify the location of directory, using a string-related enum.
let path = NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)
// grasp the first element of the array, which is the path string.
let testDir = path[0]
print(testDir)
// add more details to system path.
let filePath = testDir + &quot;/folder1&quot;
do {
    // call the responding methods to create directories, files, or
    // access them.
    try manager.createDirectory(atPath: filePath, withIntermediateDirectories: false, attributes: nil)
    print(&quot;succeed&quot;)
} catch {
    // deal with errors in the above operation.
    print(&quot;error&quot;)
}
</code></pre>
<hr>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[macOS 使用 pyenv 和 virtualenv 搭建 python 工作环境]]></title>
        <id>https://AndyLuoJJ.github.io/post/macos-shi-yong-pyenv-he-virtualenv-da-jian-python-gong-zuo-huan-jing/</id>
        <link href="https://AndyLuoJJ.github.io/post/macos-shi-yong-pyenv-he-virtualenv-da-jian-python-gong-zuo-huan-jing/">
        </link>
        <updated>2019-09-13T09:53:13.000Z</updated>
        <summary type="html"><![CDATA[<p>人生苦短，我在 Mac 上用 python。</p>
]]></summary>
        <content type="html"><![CDATA[<p>人生苦短，我在 Mac 上用 python。</p>
<!-- more -->
<h2 id="介绍">介绍</h2>
<p>macOS 自带 python2.7，但是为了更好地进行 python 的开发，最好是安装 python3 进行适配。然而，有时候我们需要在不同的项目中使用不同版本的 python，如果直接采用官网的 pkg 文件安装的话不免会产生冲突，而且也没有办法管理。为此，本文通过使用 Homebrew 和相应的工具包来搭建 python 工作环境。</p>
<blockquote>
<p>注：对于 Linux 平台，同样也可以使用 pyenv 和 virtualenv 对不同版本的 python 和不同的开发环境进行管理，命令基本相同，只是在安装 pyenv 的时候就没办法使用 Homebrew 了，可以使用 Linux 平台上的 apt-get 等包管理工具进行安装。</p>
</blockquote>
<h2 id="准备工作">准备工作</h2>
<ol>
<li>安装 Homebrew</li>
<li>了解如何使用 Terminal</li>
</ol>
<h2 id="使用-pyenv-安装-管理多版本-python">使用 pyenv 安装、管理多版本 python</h2>
<p>pyenv 提供了一个安装、管理多个版本的 python 的工具，可以用类似于 Homebrew 安装包的语句来安装、管理不同版本的 python。</p>
<h3 id="安装-pyenv">安装 pyenv</h3>
<p>安装好 Homebrew 以后，执行<code>brew install pyenv</code>即可完成 pyenv 的安装。<br>
若要卸载 pyenv，执行<code>brew uninstall pyenv</code>即可<br>
安装完成后，还需要在 .bash_profile 中增加以下内容：</p>
<pre><code>export PYENV_ROOT=&quot;${HOME}/.pyenv&quot;

if [ -d &quot;${PYENV_ROOT}&quot; ]; then
  export PATH=&quot;${PYENV_ROOT}/bin:${PATH}&quot;
  eval &quot;$(pyenv init -)&quot;
fi
</code></pre>
<p>这段代码的作用主要是指明 pyenv 的位置， 以便以后可以直接在命令行里面运行 pyenv 命令。 保存在 ~/.bash_profile 文件中是为了每次用户登陆后自动生效。</p>
<h3 id="安装-卸载-python">安装、卸载 python</h3>
<p>完成 pyenv 的安装后，执行<code>pyenv install (python-version)</code>即可安装对应版本号的 python。可通过命令<code>pyenv install --list</code>查看所有可安装的 python 版本，然后替换前面的<code>(python-version)</code>即可。<br>
安装完毕后，执行<code>pyenv version</code>查看当前 python 版本。<code>pyenv versions</code>查看已安装的 python 版本，前面有星号的表示当前 python 版本<br>
安装好的 python 实际路径为<code>~/.pyenv/versions</code></p>
<h3 id="切换-python-版本">切换 python 版本</h3>
<p>使用<code>pyenv global (python-version)</code>切换全局 python 版本，<code>pyenv global system</code>切换回系统自带 python，<code>pyenv local (python-version)</code>切换当前目录的 python 版本。</p>
<h2 id="使用-pyenv-virtualenv-创建-管理多个不同的-python-工作区">使用 pyenv-virtualenv 创建、管理多个不同的 python 工作区</h2>
<p>有时候我们需要在不同的项目工程中使用不同版本的 python，virtualenv 就是一个能够创建隔离的 python 环境的工具，这本来是一个 python 包，本节将介绍一个基于 pyenv 的插件：pyenv-virtualenv。下一节介绍如何单独使用 virtualenv 管理工作区。</p>
<h3 id="安装-pyenv-virtualenv">安装 pyenv-virtualenv</h3>
<p>使用 Homebrew 安装：<code>brew install pyenv-virtualenv</code></p>
<h3 id="创建隔离的工作环境">创建隔离的工作环境</h3>
<p>创建工作环境：<code>pyenv virtualenv (python-version) (workspace-name)</code>。<br>
上面这句命令使用给定的python版本创建了一个名为workspace-name的工作环境，目录的实际路径为<code>~/.pyenv/versions/(python-version)/envs</code>，同时会在<code>~/.pyenv/versions</code>中创建一个对应的软链接，指向相应的目录。</p>
<h3 id="切换不同的工作环境">切换不同的工作环境</h3>
<p>激活环境：<code>pyenv activate (workspace-name)</code><br>
退出环境：<code>pyenv deactivate</code><br>
在这个隔离的虚拟环境中，可以使用 pip 安装需要的包，而不会影响到其他的 python 版本。但是可能会在 home directory 下创建一些隐藏目录（如 keras、matplotlib、jupyter 等）。</p>
<h3 id="删除工作环境">删除工作环境</h3>
<p>只需要把工作环境的目录删除掉就可以删除对应的工作环境了</p>
<blockquote>
<p>顺带一提的是，使用 PyCharm 等 IDE 的时候，会自动检测出项目是否使用了 virtualenv ，因此直接在 IDE 中运行代码即可，不需要激活虚拟环境。</p>
</blockquote>
<h2 id="单独使用-virtualenv-管理工作区">单独使用 virtualenv 管理工作区</h2>
<p>virtualenv 原本是一个可以通过 pip 安装的 python 包，上面的 pyenv-virtualenv 是以插件的形式，配合 pyenv 进行使用的。如果已经用其他的方法安装了 python，如官网 pkg、Homebrew 等，还可以单独使用 virtualenv 进行管理。效果与前面完全相同，只是使用的命令有所改变。</p>
<h3 id="安装-virtualenv">安装 virtualenv</h3>
<p>使用 pip 安装：<code>pip install virtualenv</code></p>
<h3 id="创建隔离的工作环境-2">创建隔离的工作环境</h3>
<p>创建工作环境：<code>virtualenv (python-path) (workspace-directory) --option</code><br>
上述命令中，需要指定工作环境使用 python 的 python 解释器路径，然后会复制一份到工作环境中，并且还需要指定工作环境的实际路径；option 选项则可以指定是否将原来的包一并复制过去，如果使用<code>--no-site-packages</code>则不复制,<code>pyenv global (python-version)</code> 仅复制系统系统包，默认是复制的。</p>
<h3 id="切换工作环境">切换工作环境</h3>
<p>首先 cd 到 workspace-directory。<br>
激活环境：<code>source bin/activate</code><br>
退出环境：<code>deactivate</code><br>
激活后就可以在隔离的工作环境中使用 pip 安装需要的包了。</p>
<h3 id="删除隔离的工作环境">删除隔离的工作环境</h3>
<p>同样是删除 workspace-directory 即可删除工作环境。</p>
<h2 id="总结">总结</h2>
<p>说了这么多，使用这种办法来安装和管理无非是为了能够更好地掌控安装过程，并且安装、卸载也非常干净简洁。在搭建好 python 工作环境以后，马上开始着手干活才是最重要的，不能为了使用工具而使用工具，这样就本末倒置了。</p>
<hr>
<p>本文为原创文章，转载请注明。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Swift Package Manager - Swift自带的包管理器]]></title>
        <id>https://AndyLuoJJ.github.io/post/swift-package-manager-swift-zi-dai-de-bao-guan-li-qi/</id>
        <link href="https://AndyLuoJJ.github.io/post/swift-package-manager-swift-zi-dai-de-bao-guan-li-qi/">
        </link>
        <updated>2019-09-13T09:41:12.000Z</updated>
        <summary type="html"><![CDATA[<p>WWDC19 为 Swift 带来了新的活力 - Swift Package Manager 将促使 Swift 向其他领域的发展迈出重要的一步。</p>
]]></summary>
        <content type="html"><![CDATA[<p>WWDC19 为 Swift 带来了新的活力 - Swift Package Manager 将促使 Swift 向其他领域的发展迈出重要的一步。</p>
<!-- more -->
<p>为了能够更方便地通过 Swift 创建可执行文件及第三方库，Apple 提供了 Swift Package Manager 来帮助开发人员管理项目，以便复用代码及简化管理流程。</p>
<h3 id="相关概念">相关概念</h3>
<h4 id="package">Package</h4>
<p>Package 包含一系列的 Swift 源文件和一个名为<code>Package.swift</code>的配置文件。配置文件中定义了Package 的名称和内容。一个 Package 可以产生多个 target，而每个 target 唯一对应一个 product 及一个或以上的 dependency。</p>
<p>Target 是 Package 产生的目标，一个 Package 可以有多个目标。每个 Target 都产生一个输出，这个输出可以是空的、可执行文件、库、系统模块，并且每个 target 都可以是基于其他的库进行开发的，这些库就称为这个target 的依赖（dependency）。</p>
<h4 id="module">Module</h4>
<p>Swift 将 Package 中的文件以 module（模块）的形式进行管理，每一个 module 都规定了一个命名空间（namespace），并且通过访问控制符，可以控制 module 内部的代码是否可以被 module 外的代码所访问。</p>
<p>每一个工程都可以将它需要用到的代码全部包含到一个 module 中，也可以将其他的 module 导入（import）进来，作为自己的依赖（dependency）。<strong>注意 target 的依赖和工程的依赖稍有不同，所有 target 的依赖构成的集合才是工程的依赖。</strong></p>
<p>通过将能够解决某一特定类型的问题的代码封装成一个独立的模块，可以使代码复用到其他场景中。例如，用于解析JSON数据的模块可以用到所有需要与网络数据打交道的项目中，这样就不需要重新自己写相应功能的代码了。<strong>对这类代码的要求是必须独立于项目之外，具有类似于函数的特性。</strong></p>
<p>SPM 允许我们从本地或者网络上获取到我们所需要的其他第三方 module。</p>
<h4 id="library">Library</h4>
<p>Library 类似于开发中的库，即工程本身不产生可执行文件，而是作用一个通用的功能模块，可以被导入到其他项目中发挥作用。</p>
<h4 id="dependency">Dependency</h4>
<p>如果想要能够复用代码，就需要指定自己的工程<em>依赖</em>于哪些外部的代码，因为自己的工程能否正常运行取决于这些外部代码是否正常工作，因此这些外部代码也被称为依赖（dependency）。</p>
<h3 id="简单使用方法">简单使用方法</h3>
<p>下面简单介绍一下SPM的使用方法。</p>
<h4 id="创建项目">创建项目</h4>
<p>在需要创建项目的目录中执行<code>swift package init</code>以创建一个新的 Swift 项目。</p>
<pre><code>$ mkdir testProgram
$ cd testProgram
$ swift package init (--type library/executable/empty/system module)
</code></pre>
<p>type可以有四种类型：</p>
<ul>
<li>library: 创建库</li>
<li>executable: 创建可执行文件</li>
<li>empty:创建空项目</li>
<li>system module:创建系统模块项目<br>
默认创建的是library。</li>
</ul>
<p>另外，在创建好项目后，为了能够充分发挥Xcode强大的功能，还可以生成 Xcode project 以便在 Xcode 中编辑、调试代码。cd 到项目目录后，执行<code>swift package generate-xcodeproj</code>就可以创建对应的 Xcode project 了。</p>
<blockquote>
<p>目前只能在 Xcode 中实现代码编辑，暂时没有找到能够充分发挥 Xcode 功能的办法，编译和运行都需要回到 Terminal 进行。</p>
</blockquote>
<h4 id="添加外部模块">添加外部模块</h4>
<p>如前所述，<code>Package.swift</code>是项目的配置文件，模版代码如下。</p>
<pre><code class="language-swift">// swift-tools-version:4.2
// The swift-tools-version declares the minimum version of Swift required to build this package.

import PackageDescription

let package = Package(
    name: &quot;testProgram&quot;,
    products: [
        // Products define the executables and libraries produced by a package, and make them visible to other packages.
        // A package can produce multiple executables and libraries.
        .library(
            name: &quot;testProgram&quot;,
            targets: [&quot;testProgram&quot;]),
        .executable(
            name: &quot;MainExecutable&quot;,
            targets: [&quot;MainExecutable&quot;])
    ],
    dependencies: [
        // Dependencies declare other packages that this package depends on.
        // .package(url: /* package url */, from: &quot;1.0.0&quot;),
    ],
    targets: [
        // Targets are the basic building blocks of a package. A target can define a module or a test suite, and of course an executable.
        // Targets can depend on other targets in this package, and on products in packages which this package depends on.
        .target(
            name: &quot;testProgram&quot;,
            dependencies: []),
        .testTarget(
            name: &quot;testProgramTests&quot;,
            dependencies: [&quot;testProgram&quot;]),
    ]
)

</code></pre>
<p>该模版代码创建了一个Package实例，并通过构造参数来指定项目的name、product、target和dependency。各字段作用如下：</p>
<ul>
<li>name:指定项目名称</li>
<li>products:指定项目生成的东西，可以是library或者executable，同一个项目可以生成多个library或executable。</li>
<li>dependencies: 指定项目所使用的依赖库及其URL、版本等信息。</li>
<li>targets:指定项目生成的目标，</li>
</ul>
<p>若要添加开源代码，在.dependency中添加：</p>
<pre><code class="language-swift">.package(url: &quot;open source url&quot;, from: &quot;version number&quot;)
</code></pre>
<p>若要添加本地依赖，在.dependency中添加：</p>
<pre><code class="language-swift">.package(path:&quot;local path&quot;)
</code></pre>
<p>可以添加多个依赖，并且用上述类似的方法还可以创建多个products和targets。</p>
<p>然后在产生的targets中，指定对应的dependency的名称就可以了。</p>
<h4 id="发布library">发布library</h4>
<p>使用Git将自己创建好的library发布到托管仓库中。</p>
<pre><code>$ git init  // create a new git project
$ git add . // add all files to the stack
$ git remote add origin [github-URL] // add a remote origin in the remote repository
$ git commit -m &quot;Initial Commit&quot; // commit all files in the stack to local repository
$ git tag 1.0.0 // tag the branch
$ git push origin master --tags // push local repository to remote repository
</code></pre>
<p>tag标记的版本号就是其他项目将本项目作为依赖时引用的版本号（from）。对于本地依赖，虽然可以借助git的本地仓库回溯功能进行代码管理，但是在Swift Package Manager中暂时不支持引用本地依赖的版本号。</p>
<h4 id="更新依赖包">更新依赖包</h4>
<p>编辑<code>Package.swift</code>中依赖包的版本信息，然后执行<code>swift package update</code>即可更新需要的依赖包。</p>
<h4 id="创建模块">创建模块</h4>
<p>只需要将<code>Package.swift</code>中的products添加.library就可以创建模块了。每一个Package可以产生多个library，不同的library在Sources目录下以不同名称的目录呈现。</p>
<p>如果生成的library之间有相互关联，则需要在完成一个library的编码工作后，先执行<code>swift build</code>对已有的library进行编译，然后再进行下一个library的编码工作。这有助于以模块化的方式完成library的创建。</p>
<p>注意：对于使用Git开源的代码，需要打上git tag，别人才能够导入对应版本的代码。同样地，对于本地依赖，最好也加上git tag，但是应该不是必须的。</p>
<h3 id="实例结合使用swift-for-tensorflow和swift-package-manager">实例——结合使用Swift for TensorFlow和Swift Package Manager</h3>
<p>为了能够同时使用Swift for TensorFlow和Swift Package Manager进行Swift机器学习项目的管理（个人认为这是比较通用的方法），需要先指定swift路径为SFT的路径，然后使用SPM对项目进行编译、运行等处理。下面macOS上的SFT和SPM为例介绍如何结合使用两者。</p>
<ol>
<li>指定swift路径<br>
在<code>$PATH</code>中指定swift的路径。由于使用了Swift for TensorFLow，因此需要到GitHub仓库中下载对应的swift toolchain，链接<a href="https://github.com/tensorflow/swift">在这里</a>。该swift toolchain中包含了完整的swift编译器，与Xcode自带的toolchain相比多了能够使用TensorFlow的功能。</li>
</ol>
<blockquote>
<p>如果在Linux下进行开发，还需要事先配置好swift的环境，具体教程<a href="https://swift.org/getting-started/">见这里</a>。</p>
</blockquote>
<ol start="2">
<li>创建model对应的library<br>
由于机器学习模型是比较独立的部分，因此最好将其作为一个独立的module，然后将其导入到其他项目中去。接下来要做的创建ML model对应的library。</li>
</ol>
<p>由于例子中MLModel没有使用到第三方库，因此配置文件不需要修改。在<code>./Sources/name</code>中就包含了一个本地module，修改代码为:</p>
<pre><code class="language-swift">import TensorFlow

struct MLPClassifier {
    var w1 = Tensor&lt;Float&gt;(shape: [2, 4], repeating: 0.1)
    var w2 = Tensor&lt;Float&gt;(shape: [4, 1], scalars: [0.4, -0.5, -0.5, 0.4])
    var b1 = Tensor&lt;Float&gt;([0.2, -0.3, -0.3, 0.2])
    var b2 = Tensor&lt;Float&gt;([[0.4]])

    func prediction(`for` x: Tensor&lt;Float&gt;) -&gt; Tensor&lt;Float&gt; {
        let o1 = tanh(matmul(x, w1) + b1)
        return tanh(matmul(o1, w2) + b2)
    }
}
</code></pre>
<p>这里用一个简单的MLP模型作为例子进行展示，自定义了一个MLPClassifierd的类，定义了第一层及第二层的权重和bias，然后使用tanh作为activation function，得到“网络”输出的结果。<br>
通过上述代码就完成了ML model的创建，可以运行swift build看看有没有问题。</p>
<blockquote>
<p>为了加速模型的计算，会有warning说没有用optimization编译。对于小网络来说影响不大，但如果网络结构比较复杂的时候可能会导致训练过慢。暂时好像没有什么办法，唯一想到的解决方案是在release模式下编译，即<code>swift build -c release</code>，release模式默认使用-O进行编译。</p>
</blockquote>
<ol start="3">
<li>创建swift项目<br>
接下来创建使用前面建立好的module的swift项目。新建一个executable的项目，并在Package.swift中添加本地依赖MLModel和用于测试的第三方库SwiftyJSON。</li>
</ol>
<p>测试代码如下：</p>
<pre><code class="language-swift">import TensorFlow
import MLModel

let input = Tensor&lt;Float&gt;([[0.2, 0.8]])
let classifier = MLPClassifier()
let prediction = classifier.prediction(for: input)
print(prediction)
</code></pre>
<p>⚠️：SwiftyJSON要求toolchain版本在4以上，而Swift for TensorFlow的toolchain版本为3，因此暂时没有办法同时使用这两个框架。</p>
<ol start="4">
<li>编译运行<br>
尝试进行编译运行。可以分别执行编译和运行两个步骤，也可以直接运行观察代码运行结果。<br>
编译项目：</li>
</ol>
<pre><code>swift build
</code></pre>
<p>默认的编译环境是<code>debug</code>，可通过<code>-c release</code>的标记，将编译环境切换到<code>release</code>。debug模式默认不开启-O优化，因此为了使Swift for TensorFlow获得最佳性能，建议先在release模式下编译项目，再到指定目录执行link生成的可执行文件。</p>
<p>运行项目：</p>
<pre><code>swift run (executable name)
</code></pre>
<p>也可以找到build生成的可执行文件，然后直接执行。</p>
<blockquote>
<p>如果项目中存在多个可执行文件，需要在<code>swift run</code>命令后增加对应的可执行文件的名称。利用这一特性可以将多个独立的工程汇总在一个package下面，便于管理，但是一个不好的地方是如果修改了一个地方就必须把当前package下的所有swift源文件编译一遍。目前的解决方法是当package规模扩大后，将其中一部分相对独立的功能打包成新的swift package，然后导入进来，这样就不用重新编译导入进来的源码了。</p>
</blockquote>
<hr>
<p>本文为原创文章，转载请注明。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Homebrew - macOS 上完美的包管理器]]></title>
        <id>https://AndyLuoJJ.github.io/post/homebrew-macos-shang-wan-mei-de-bao-guan-li-qi/</id>
        <link href="https://AndyLuoJJ.github.io/post/homebrew-macos-shang-wan-mei-de-bao-guan-li-qi/">
        </link>
        <updated>2019-09-13T09:15:33.000Z</updated>
        <summary type="html"><![CDATA[<p>你需要几个好的「管家」来管理你的电脑 - Homebrew 就是其中一个。</p>
]]></summary>
        <content type="html"><![CDATA[<p>你需要几个好的「管家」来管理你的电脑 - Homebrew 就是其中一个。</p>
<!-- more -->
<h2 id="介绍">介绍</h2>
<p>As you know，macOS 是一个类 Unix 平台，能够方便地配置各种需要的开发环境，前端、后台、移动端的开发都可以在 macOS 上进行。在开发的过程中，常常需要开发者安装各种各样的第三方工具才能够完成相应的开发任务，比如Python、MySQL。然而，不同于 Ubuntu 自带有 apt-get，在 macOS 上一直没有原生的包管理工具，这也为开发者使用第三方库带来了一定的困难。另一方面，有时候采用官方的安装方法，可能会与系统自身的文件系统纠缠在一起，如果未来某天想要彻底删除第三方库的话，可能会异常繁琐，甚至一不小心就删除了系统文件，得不偿失。Homebrew 的诞生解决了这一问题，通过 Homebrew 可以方便地进行包管理，并且不会对系统文件产生影响。本文将对这个神奇的工具进行一些简单的介绍。</p>
<blockquote>
<p>一些趣闻：听说 Homebrew 的作者因为面试的时候没办法手写二叉树被拒了。</p>
</blockquote>
<h3 id="什么是homebrew">什么是Homebrew</h3>
<p>正如官方宣传的那样（官网链接<a href="https://brew.sh">戳这里</a>），Homebrew 是macOS 上缺失已久的包管理工具，它是一个命令行（CLI）程序，提供了类似Ubuntu 上的 apt-get 功能，通过简单的命令，就能够方便地进行第三方库的安装、更新与卸载操作，并且避免了与系统文件产生冲突的弊端。</p>
<h3 id="为什么要使用homebrew">为什么要使用Homebrew</h3>
<p>作为一名开发者，与第三方库打交道是再正常不过的事情了。在 macOS 平台上，使用第三方库的方式主要包括：源码编译、官网提供 pkg 文件、使用包管理工具。使用源码编译能够完全掌握安装流程，还能够按照自己的需求修改源码进行个性化，但是步骤比较繁琐，需要的编译工具较多，并且容易出错。使用官方提供的 pkg 文件简化了安装步骤，比如 Python 就提供了官方 pkg 安装包，直接双击打开像安装应用程序一样即可，但是采用这种方式进行安装非常容易与系统文件混在一起，卸载的时候就是一场噩梦了。虽然通过 pkgutil 可以查看安装 pkg 的时候创建了哪些文件，但是要想做到完全卸载还是需要手动进行清理。而使用包管理工具则进一步简化了安装步骤，只需使用简单的命令就能方便地安装、更新和删除，在易用性和功能性中间取得一个较好的平衡。</p>
<p>除了 Homebrew 以外，还有其他的 macOS 包管理工具，如 MacPorts 等，感兴趣的话可以自行查阅相关资料。</p>
<h2 id="安装与卸载">安装与卸载</h2>
<p>下面介绍 Homebrew 本身的安装、更新与卸载方法。注意：以下所有代码均在 Terminal 中执行。</p>
<h3 id="安装">安装</h3>
<p>Homebrew 是一个使用 Ruby 编写的程序，而 macOS 自带 Ruby，因此可以使用自带的 Ruby 进行安装。执行下列代码：</p>
<pre><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
</code></pre>
<p>如有需要，可以先升级一下系统的 Ruby 版本再安装 Homebrew。</p>
<p>在 macOS 上使用命令行程序需要先安装 Xcode Command Line Tools，可以通过<code>xcode-select install</code>进行安装，按照提示一步一步执行即可。</p>
<p>Homebrew 安装完成后，可以执行<code>brew --help</code>查看 Homebrew 的帮助文档，同时验证是否安装成功。</p>
<h3 id="更新">更新</h3>
<p>执行下列代码以更新 Homebrew：</p>
<pre><code>brew update
</code></pre>
<p>Homebrew 源在国外，更新和下载的时候可能比较慢，稍微等一下就好，也可以采取魔法上网加快下载速度。</p>
<h3 id="卸载">卸载</h3>
<p>执行下列代码以卸载 Homebrew：</p>
<pre><code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&quot;
</code></pre>
<p>Homebrew 的安装目录在<code>/usr/local/Cellar</code>，可以看看有没有什么残留文件。</p>
<h2 id="使用homebrew">使用Homebrew</h2>
<p>下面简单介绍一下如何使用 Homebrew。</p>
<h3 id="库的查找-安装-更新-删除">库的查找、安装、更新、删除</h3>
<p>要查找自己准备安装的库是否支持 Homebrew，可以用 Homebrew 查一下，执行</p>
<pre><code>brew search &lt;formulae&gt;
</code></pre>
<p>执行下列代码以查看库的信息：</p>
<pre><code>brew info &lt;formulae&gt;
</code></pre>
<p>执行下列代码以安装新的库：</p>
<pre><code>brew install &lt;formulae&gt;
</code></pre>
<p>执行下列代码以查看哪些库有新的版本</p>
<pre><code>brew outdated
</code></pre>
<p>执行下列代码对给定的库进行更新，更新后原来的库文件夹会自动删除。</p>
<pre><code>brew upgrade &lt;formulae&gt;
</code></pre>
<p>也可以一次性更新全部</p>
<pre><code>brew upgrade
</code></pre>
<p>执行下列代码删除已安装的第三方库</p>
<pre><code>brew unistall &lt;formulae&gt;
</code></pre>
<p>执行下列代码列出已经成功安装的库</p>
<pre><code>brew list
</code></pre>
<h3 id="添加第三方仓库">添加第三方仓库</h3>
<p>能够直接使用 Homebrew 安装的第三方库都保存在 Homebrew 自己的 Github core 中，Homebrew 还支持从其他仓库进行安装，vapor 就是一个典型的例子。<br>
执行下列代码查看已添加的仓库</p>
<pre><code>brew tap
</code></pre>
<p>执行下列代码添加新的 Github 路径，通常可以通过第三方库的帮助文档获得</p>
<pre><code>brew tap &lt;user/repo&gt;
</code></pre>
<p>如果第三方库不是保存在 Github 上的话，需要给出完整路径</p>
<pre><code>brew tap &lt;user/repo&gt; &lt;URL&gt;
</code></pre>
<p>执行下列代码对 tap 的库进行固定</p>
<pre><code>brew tap-pin &lt;user/repo&gt;
</code></pre>
<p>在 Homebrew 安装第三方库的时候，如存在重名的库，会按照一下的顺序进行安装：</p>
<ol>
<li>pinned taps</li>
<li>core formulae</li>
<li>other taps<br>
如果想要在安装的时候指定使用哪个 tap，可以执行下列代码</li>
</ol>
<pre><code>brew install username/repo/formulae
</code></pre>
<p>如果直接使用<code>brew install</code>，将会按照上述顺序搜索并安装。</p>
<p>执行下列代码移除路径</p>
<pre><code>brew untap &lt;user/repo&gt;
</code></pre>
<blockquote>
<p>关于添加第三方仓库的详细内容请查阅<a href="https://docs.brew.sh/Taps#taps-third-party-repositories">官方文档</a>。</p>
</blockquote>
<h3 id="troubleshooting">TroubleShooting</h3>
<p>执行下列代码清理一下 Homebrew 中的无用文件，</p>
<pre><code>brew cleanup
</code></pre>
<p>执行下列代码对 Homebrew 进行诊断，如果出现 warning，通常来说只要 Homebrew 能正常使用就不用管。</p>
<pre><code>brew doctor
</code></pre>
<h2 id="使用homebrew-cask">使用Homebrew Cask</h2>
<p>Homebrew 能够实现第三方库的便捷安装，那么有没有什么东西能够实现第三方应用程序的便捷安装呢？受 Homebrew 的启发，Homebrew 的作者开发了Homebrew Cask，旨在使用类似于 Homebrew 的方式对第三方应用程序进行管理。</p>
<blockquote>
<p>这里的第三方应用程序指的是没有在 Mac App Store 上架的应用程序。</p>
</blockquote>
<h3 id="什么是homebrew-cask">什么是Homebrew Cask</h3>
<p>Homebrew Cask 可以说是 Homebrew 的一个衍生程序，是为了解决 macOS 上非 Mac App Store 的应用程序的管理问题。在 macOS 上，常见的应用程序安装方式包括：Mac App Store、dmg 文件、pkg 文件。由于桌面端的环境不比移动端，在 macOS 上还无法像 iOS 一样强制用户在 App Store 中安装应用程序，因此可以使用多种方法在 macOS 上安装应用程序。</p>
<ol>
<li>Mac App Store 是苹果官方的安装渠道，在 Mac App Store 上架的软件严格遵循沙盒限制，每个应用程序有自己独立的文件系统，未得到用户允许无法访问其他目录，安全性有很好的保障，但也由于沙盒的原因，在 Mac App Store 上架的应用程序有不少都是阉割版程序，缺失部分核心功能，如 QQ、QQ 音乐、Alfred 等。</li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://cn.bing.com/th?id=OIP.aOIJ9xxpnDpIsJmHZ-_YrQHaHa&amp;pid=Api&amp;rs=1" alt="MAS" loading="lazy"></figure>
<ol start="2">
<li>pkg 是早期 Mac 上非常常用的安装方式，在前面也提到过 Python 提供了官方 pkg 安装包，同样它也可以用来安装应用程序。使用 pkg 进行安装只需要双击 pkg 文件，然后按照提示一步一步进行即可，与在 Windows 上安装软件非常相似，使用起来比较方便。但是 pkg 安装存在的问题是应用程序产生的文件可能会与系统文件混在一起，卸载的时候如果不借助第三方清理工具会非常麻烦。常见的使用 pkg 安装的软件有 Adobe 全家、Microsoft Office、Teamviewer 等。有「洁癖」的用户可以使用自带的 pkgutil 或第三方的 UninstallPKG 对 pkg 安装的应用程序进行清理。</li>
</ol>
<figure data-type="image" tabindex="2"><img src="https://images2015.cnblogs.com/blog/996103/201607/996103-20160721150540919-1448409147.png" alt="PKG" loading="lazy"></figure>
<ol start="3">
<li>dmg 是目前比较主流的安装方式，应用程序发布者将编译打包好的 .app 文件放在 dmg 文件中，用户安装时直接将 app 拖放到 /Application 目录即可，安装过程简单到令人发指。</li>
</ol>
<figure data-type="image" tabindex="3"><img src="https://cn.bing.com/th?id=OIP.FcEQ7YbtWC5f7LAV269smQHaD-&amp;pid=Api&amp;rs=1" alt="DMG" loading="lazy"></figure>
<p>Homebrew Cask 在 dmg 安装的基础上简化了操作，直接通过命令行方便地管理已安装的应用，并且在一定程度上解决了卸载不完全的问题。</p>
<h3 id="软件的查找-安装-更新-删除">软件的查找、安装、更新、删除</h3>
<p>在已经安装好 Homebrew 的前提下，先安装 Homebrew Cask，实际上就是把Homebrew Cask 添加到tap的列表中</p>
<pre><code>brew tap caskroom/cask
</code></pre>
<p>执行下列代码查找能够使用 Homebrew Cask 安装的应用程序</p>
<pre><code>brew cask search &lt;formulae&gt;
</code></pre>
<p>执行下列代码查看应用程序的信息</p>
<pre><code>brew cask info &lt;formulae&gt;
</code></pre>
<p>执行下列代码安装应用程序</p>
<pre><code>brew cask install &lt;formulae&gt;
</code></pre>
<p>安装完成后，应用程序会自动被移动到 /Application 目录，等同于从 dmg 中拖出来放到里面。<br>
执行下列代码删除应用程序</p>
<pre><code>brew cask uninstall &lt;formulae&gt;
</code></pre>
<p>对于应用程序的更新，Homebrew 官方建议采用应用程序自己的更新方法对应用进行更新，如果仍想通过 Homebrew Cask 处理，可以先卸载再重新安装即可。<br>
执行下列代码列出已安装的应用程序</p>
<pre><code>brew cask list
</code></pre>
<p>⚠️需要注意的是，使用 Homebrew Cask 仅仅是替代了「从 dmg 文件中把应用拖到 /Application 」这一步骤，如果安装的应用程序是商业软件，仍然需要输入软件授权码才能继续使用。</p>
<blockquote>
<p>Homebrew Cask 安装的一定是正版软件噢。</p>
</blockquote>
<h2 id="总结">总结</h2>
<p>作为一款优秀的程序，Homebrew 使用起来非常简单，其使用教程都可以在<a href="https://docs.brew.sh">官方文档</a>中查到。Homebrew 的诞生极大提高了开发者们的效率，让他们不再为第三方库的繁琐安装步骤而烦恼。</p>
<p>本文只是简单介绍了Homebrew最简单的应用，更加进阶的使用方法可以自行搜索或查阅官方文档。</p>
<p>另外，除了开发者以外，普通用户有时候也能从中获益。例如，macOS 上的 PSP 模拟器程序 PPSSPP 需要两个库的支持，分别是 sdl2 和 libzip，在官方安装教程中就建议用户使用 Homebrew 安装这两个库，才能够正常运行 PPSSPP。</p>
<hr>
<p>本文为原创文章，转载请注明。</p>
]]></content>
    </entry>
</feed>